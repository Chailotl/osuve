<?xml version="1.0"?>
<doc>
  <assembly>
    <name>SphinxConnector</name>
  </assembly>
  <members>
    <member name="T:SphinxConnector.FluentApi.Suggestion">
      <summary>
            A suggestion for a word or query.
            </summary>
      <seealso cref="M:SphinxConnector.FluentApi.IFulltextSession.GetSuggestions``1(System.String)" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Suggestion.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.FluentApi.Suggestion" /> class.
            </summary>
      <param name="value">The suggestion.</param>
      <param name="levenshteinDistance">The levenshtein distance between the input word and the suggestion.</param>
      <param name="documentCount">The number of documents containing the suggestion.</param>
    </member>
    <member name="P:SphinxConnector.FluentApi.Suggestion.Value">
      <summary>
            The suggested word.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.Suggestion.DocumentCount">
      <summary>
            The number of documents containing the suggestion, or null if <see cref="P:SphinxConnector.FluentApi.SuggestionOptions.ReturnStatistics" /> is <b>false</b>.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.Suggestion.LevenshteinDistance">
      <summary>
            The Levenshtein distance between the suggestion and the input word, or null if <see cref="P:SphinxConnector.FluentApi.SuggestionOptions.ReturnStatistics" /> is <b>false</b>.        
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.SuggestionOptions">
      <summary>
            Represents the options for getting suggestions.
            </summary>
      <seealso cref="M:SphinxConnector.FluentApi.IFulltextSession.GetSuggestions``1(System.String)" />
    </member>
    <member name="M:SphinxConnector.FluentApi.SuggestionOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.FluentApi.SuggestionOptions" /> class.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.SuggestionOptions.Limit">
      <summary>
            The maximum number of suggestion to return. Default is 5.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.SuggestionOptions.ReturnStatistics">
      <summary>
            Whether to return statistics for a suggestions. Default is true.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.SuggestionOptions.MaxLevenshteinDistance">
      <summary>
            The maximum Levenshtein distance between the original input and a suggestion. Default is 4.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.SuggestionOptions.DeltaLength">
      <summary>
            The maximum difference in length between the original input and a suggestion. Default is 3.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.SuggestionOptions.RejectQueueLength">
      <summary>
            Rejected words are matches that are not better than those already in the match queue. 
            They are put in a rejected queue that gets reset in case one actually can go in the match queue.
            This option defines the size of the rejected queue (as reject*max(max_matched,limit)). 
            If the rejected queue is filled, the engine stops looking for potential matches.
            </summary>
    </member>
    <member name="T:SphinxConnector.Common.HtmlStripMode">
      <summary>
            Determines the mode Sphinx uses when stripping HTML from excerpts.
            </summary>
      <seealso cref="T:SphinxConnector.NativeApi.BuildExcerptsOptions" />
      <seealso cref="T:SphinxConnector.FluentApi.SnippetsOptions" />
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.BuildExcerpts(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,SphinxConnector.NativeApi.BuildExcerptsOptions)" />
      <seealso cref="M:SphinxConnector.FluentApi.IFulltextSession.BuildSnippets``1(System.Collections.Generic.IEnumerable{System.String},System.String)" />
    </member>
    <member name="F:SphinxConnector.Common.HtmlStripMode.None">
      <summary>
            Do not strip HTML from excerpts.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.HtmlStripMode.Strip">
      <summary>
            Strip HTML from excerpts.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.HtmlStripMode.Index">
      <summary>
            Use index settings.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.HtmlStripMode.Retain">
      <summary>
            Retain HTML markup and protect it from highlighting.
            </summary>
      <remarks>
            The "retain" mode can only be used when highlighting full documents and 
            thus requires that no snippet size limits are set.
            </remarks>
    </member>
    <member name="T:SphinxConnector.Common.Idf">
      <summary>
            Determines the calculation method Sphinx uses for the idf (Inverse Document Frequency).
            </summary>
      <seealso href="http://sphinxsearch.com/docs/current.html#sphinxql-select" />
      <remarks>
            Supported with Sphinx 2.1.1 and up.
            </remarks>
    </member>
    <member name="F:SphinxConnector.Common.Idf.Normalized">
      <summary>
            BM25 variant, idf = log((N-n+1)/n), as per Robertson et al where N is the collection size and n is the number of matched documents.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.Idf.Plain">
      <summary>
            Plain variant, idf=log(N/n), as per Sparck-Jones where N is the collection size and n is the number of matched documents.
            </summary>
    </member>
    <member name="T:SphinxConnector.Common.PassageBoundary">
      <summary>
            Determines the passage boundary when building excerpts.
            </summary>
      <seealso cref="T:SphinxConnector.NativeApi.BuildExcerptsOptions" />
      <seealso cref="T:SphinxConnector.FluentApi.SnippetsOptions" />
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.BuildExcerpts(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,SphinxConnector.NativeApi.BuildExcerptsOptions)" />
      <seealso cref="M:SphinxConnector.FluentApi.IFulltextSession.BuildSnippets``1(System.Collections.Generic.IEnumerable{System.String},System.String)" />
    </member>
    <member name="F:SphinxConnector.Common.PassageBoundary.None">
      <summary>
      </summary>
    </member>
    <member name="F:SphinxConnector.Common.PassageBoundary.Sentence">
      <summary>
      </summary>
    </member>
    <member name="F:SphinxConnector.Common.PassageBoundary.Paragraph">
      <summary>
      </summary>
    </member>
    <member name="F:SphinxConnector.Common.PassageBoundary.Zone">
      <summary>
      </summary>
    </member>
    <member name="T:SphinxConnector.Common.Predictions">
      <summary>
            Provides predicted meta data for a query.
            </summary>
      <seealso cref="P:SphinxConnector.FluentApi.QueryMetadata.Predictions" />
    </member>
    <member name="M:SphinxConnector.Common.Predictions.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:SphinxConnector.Common.Predictions.Time">
      <summary>
            Predicted query time.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.Predictions.DistributedTime">
      <summary>
            Predicted distributed query time.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.Predictions.FetchedDocuments">
      <summary>
            Predicted number of local documents to fetch.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.Predictions.FetchedHits">
      <summary>
            Predicted number of local hits.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.Predictions.Skips">
      <summary>
            Predicted number of local skips. 
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.Predictions.FetchedDocumentsDistributed">
      <summary>
            Predicted number of distributed documents to fetch.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.Predictions.FetchedHitsDistributed">
      <summary>
            Predicted number of distributed hits.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.Predictions.SkipsDistributed">
      <summary>
            Predicted number of distributed skips.
            </summary>
    </member>
    <member name="T:SphinxConnector.Common.TfIdf">
      <summary>
            Determines the calculation method Sphinx uses for the tf–idf (term frequency–inverse document frequency).
            </summary>
      <seealso href="http://sphinxsearch.com/docs/current.html#sphinxql-select" />
      <remarks>Supported with Sphinx 2.2.1 and up.</remarks>
    </member>
    <member name="F:SphinxConnector.Common.TfIdf.Normalized">
      <summary>
            Additionally divide IDF by query word count, so that tf*idf fits into [0, 1] range.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.TfIdf.Unnormalized">
      <summary>
            Do not additionally divide idf by query word count.
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.ConnectionStringConfigurator">
      <summary>
            Provides methods to configure a connection string. If no methods are configured, the class
            will first look for a connection string named <b>sphinx</b> in the app.config file. If no 
            connection string by that name is found, the default connection string of 
            <b>datasource=localhost;port=9306</b> will be used.
            </summary>
      <threadsafety static="true" instance="false" />
      <seealso cref="P:SphinxConnector.FluentApi.FulltextStore.ConnectionString" />
    </member>
    <member name="M:SphinxConnector.FluentApi.ConnectionStringConfigurator.IsThis(System.String)">
      <summary>
            Sets the connection string to the given value.
            </summary>
      <param name="connectionString">The connection string.</param>
      <exception cref="T:System.ArgumentNullException">Occurs when the provided string is null.</exception>
      <exception cref="T:System.ArgumentException">Occurs when the provided string is empty.</exception>
      <exception cref="T:System.InvalidOperationException">Occurs in case the connection string has already been set.</exception>
      <example>
        <code>
            IFulltextStore fulltextStore = new FulltextStore().Initialize();
            fulltextStore.ConnectionString.IsThis("datasource=192.168.105;port=9306");        
            </code>
      </example>
    </member>
    <member name="M:SphinxConnector.FluentApi.ConnectionStringConfigurator.IsProvidedBy(System.Func{System.String})">
      <summary>
            Sets a method that is responsible for returning a connection string. This method is called each time
            a connection string is required for an operation.
            </summary>
      <param name="connectionStringProvider">A method returning a connection string.</param>
      <exception cref="T:System.ArgumentNullException">Occurs if the given method is null.</exception>
      <exception cref="T:System.InvalidOperationException">Occurs in case the connection string has already been set.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.ConnectionStringConfigurator.Named(System.String)">
      <summary>
            Use the connection string with the given name from the app.config file. 
            </summary>
      <param name="connectionStringName">The name of the connection string in the app.config file.</param>
      <exception cref="T:System.ArgumentNullException">Occurs when the provided string is null.</exception>
      <exception cref="T:System.ArgumentException">Occurs when the provided string is empty.</exception>
      <exception cref="T:System.InvalidOperationException">Occurs in case the connection string has already been set.</exception>
      <example>
            Suppose your app.config looks like this:
            <code>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;configuration&gt;
              &lt;connectionStrings&gt;
                &lt;add name="SphinxConnectionString" connectionString="datasource=192.168.105;port=9306"/&gt;
                &lt;/connectionStrings&gt;  
            &lt;/configuration&gt;
            </code><br />
            You can then configure the FulltextStore class to use that connection string like this:
            <code>
            IFulltextStore fulltextStore = new FulltextStore().Initialize();
            fulltextStore.ConnectionString.Named("SphinxConnectionString");        
            </code></example>
    </member>
    <member name="M:SphinxConnector.FluentApi.ConnectionStringConfigurator.Get">
      <summary>
            Gets the connection string.
            </summary>
      <returns>The connection string for this instance.</returns>
    </member>
    <member name="T:SphinxConnector.FluentApi.ConventionConfiguration">
      <summary>
            Used to configure the conventions used to e.g. determine index- and attributes names.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.FluentApi.ConventionConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.FluentApi.ConventionConfiguration" /> class.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.ConventionConfiguration.GetIndexName">
      <summary>
             Gets or sets the method that returns the index names(s) for the given type. The default converts the type name to lower case and pluralizes it (by appending an 's').
             </summary>
      <remarks>
             Methods may return a comma separated list of index names. This is useful in case
             the data for a type is stored in several indexes, e.g. in main-delta setups or
             if stemmed documents reside in a seperate index.
             The default looks like this:
             <code>
             GetIndexName = (type, context) =&gt; type.Name.ToLowerInvariant() + "s";
             </code></remarks>
      <example>
             An example for a main-delta setup could look like this:
             <code>
             GetIndexName = (type, context) =&gt; String.Format("{0}, {0}_delta", type.Name.ToLowerInvariant() + "s");
             </code>
             You can also return different index names depending on the context. Supppose you have two real-time indexes:
             one for the original documents and one for the stemmed documents, and you've setup a distributed index to
             let Sphinx search them in parallel. You'd then direct saves and deletes to both indexes, queries on the other 
             hand would go to the distributed index:
             <code>
             GetIndexName = (type, context) =&gt;
             {
                 if (context.OperationType == OperationType.Save || context.OperationType == OperationType.Delete)
                 {
                     return String.Format("{0}, {0}_stemmed", type.Name.ToLowerInvariant() + "s");
                 }
            
                 return String.Format("{0}_dist", type.Name.ToLowerInvariant() + "s");
             };
             </code></example>
      <seealso cref="T:SphinxConnector.FluentApi.FulltextSessionContext" />
      <seealso cref="T:SphinxConnector.FluentApi.OperationType" />
    </member>
    <member name="P:SphinxConnector.FluentApi.ConventionConfiguration.GetAttributeName">
      <summary>
            Gets or sets a method that returns the attribute name for the given property or field. 
            The default uses the member name and converts it to all lower case letters.
            </summary>
      <example>
            The default is this:
            <code>
            GetAttributeName = info =&gt; info.Name.ToLowerInvariant();
            </code></example>
    </member>
    <member name="P:SphinxConnector.FluentApi.ConventionConfiguration.GetJsonFieldName">
      <summary>
            Gets or sets a method that returns the field name for the given property or field of a JSON object.
            The default uses the member name as is, without any modifications.
            </summary>
      <remarks>
            You can configure Sphinx to automatically convert JSON field names, e.g. setting<br /><b>json_autoconv_keynames = lowercase</b><br />
            in your sphinx.conf will convert all fields names to lower case. You'd then set this method to:
            <code>
            GetJsonFieldName = info =&gt; info.Name.ToLowerInvariant();
            </code></remarks>
    </member>
    <member name="P:SphinxConnector.FluentApi.ConventionConfiguration.IsIdMember">
      <summary>
            Gets or sets a method that determines if the given property or field of a type represents the document id. The default looks
            for a member named <b>Id</b>.
            </summary>
      <example>
            The default is this:
            <code>
            IsIdMember = info =&gt; info.Name == "Id";
            </code></example>
    </member>
    <member name="P:SphinxConnector.FluentApi.ConventionConfiguration.IsFulltextFieldOnly">
      <summary>
            Gets or sets a method that determines if the given property or field of type string is a full-text field only, i.e. it is not 
            available as a string attribute in the index. The default always returns <b>false</b>.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.ConventionConfiguration.SaveEnumsAsIntegers">
      <summary>
            Gets or sets a value that indicates whether enums should be persisted as integers. Default is <b>true</b>.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.ConventionConfiguration.SerializeTypeAsJson">
      <summary>
            Gets or sets a method that determines if the given type should be serialized to JSON. The default is to serialize types to JSON
            if they can't be stored in any other Sphinx attribute type.
            </summary>
      <remarks>
            By default, the following types are <b>not</b> serialized to JSON :
            <list type="bullet"><item><description>Numeric types like int, float, decimal</description></item><item><description>Strings</description></item><item><description>Generic enumerables with numeric types</description></item><item><description>Guid's</description></item></list></remarks>
    </member>
    <member name="P:SphinxConnector.FluentApi.ConventionConfiguration.DocumentNeedsIdAssigned">
      <summary>
            Gets or sets a method that determines whether the given document needs to have an id assigned before saving. If not, <see cref="P:SphinxConnector.FluentApi.ConventionConfiguration.DocumentIdGenerator" /> 
            will be called to generate an id which will then be assigned to the document. The default method will return <b>false</b>,
            if the id member (determined by <see cref="P:SphinxConnector.FluentApi.ConventionConfiguration.IsIdMember" />) has a value greater 0, otherwise <b>true</b>.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.ConventionConfiguration.DocumentIdGenerator">
      <summary>
            Gets or sets a method that generates a document id for the given document. There is no default method. An exception will
            be thrown if no id generator has been configured and a document without a valid id (as determined by <see cref="P:SphinxConnector.FluentApi.ConventionConfiguration.DocumentNeedsIdAssigned" /> 
            is about to be stored in an index.
            </summary>
      <remarks>
            This method will be invoked during <see cref="M:SphinxConnector.FluentApi.IFulltextSession.Save(System.Object)" /> if <see cref="P:SphinxConnector.FluentApi.ConventionConfiguration.DocumentNeedsIdAssigned" /> returned true
            for the given document.  Please note that your implementation of an id generator needs to make sure that it is thread-safe. 
            </remarks>
    </member>
    <member name="T:SphinxConnector.FluentApi.GeodistanceOptions">
      <summary>
            Specifies the options to use for geo distance calculations. Supported with Sphinx 2.2.1 and up.
            </summary>
      <seealso cref="M:SphinxConnector.FluentApi.Function.Geodist(System.Single,System.Single,System.Single,System.Single,SphinxConnector.FluentApi.GeodistanceOptions)" />
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-geodist" />
    </member>
    <member name="P:SphinxConnector.FluentApi.GeodistanceOptions.InputUnit">
      <summary>
            Gets the input unit for geo distance calculations.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.GeodistanceOptions.OutputUnit">
      <summary>
            Gets the output unit for geo distance calculations.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.GeodistanceOptions.CalculationMethod">
      <summary>
            Determines the calculcation method for geo distances. If none is specified, Sphinx will use 'Haversine' in versions
            prior to 2.2.1 and 'Adaptive' starting with 2.2.1
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.GeodistanceInputUnit">
      <summary>
            Determines the input unit for geo distance calculations.
            </summary>
      <seealso cref="M:SphinxConnector.FluentApi.Function.Geodist(System.Single,System.Single,System.Single,System.Single,SphinxConnector.FluentApi.GeodistanceOptions)" />
      <seealso cref="T:SphinxConnector.FluentApi.GeodistanceOptions" />
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-geodist" />
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceInputUnit.Default">
      <summary>
            The input is provided in the default unit.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceInputUnit.Degrees">
      <summary>
            The input is provided in degrees.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceInputUnit.Radians">
      <summary>
            The input is provided in radians.
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.GeodistanceOutputUnit">
      <summary>
            Determines the output unit for geo distance calculations.
            </summary>
      <seealso cref="M:SphinxConnector.FluentApi.Function.Geodist(System.Single,System.Single,System.Single,System.Single,SphinxConnector.FluentApi.GeodistanceOptions)" />
      <seealso cref="T:SphinxConnector.FluentApi.GeodistanceOptions" />
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-geodist" />
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceOutputUnit.Default">
      <summary>
            The output should be provided in the default unit.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceOutputUnit.Meters">
      <summary>
            The output should be provided in meters.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceOutputUnit.Kilometers">
      <summary>
            The output should be provided in kilometers.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceOutputUnit.Feet">
      <summary>
            The output should be provided in feet.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceOutputUnit.Miles">
      <summary>
            The output should be provided in miles.
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.GeodistanceCalculationMethod">
      <summary>
            Determines the calculcation method for geo distances.
            </summary>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-geodist" />
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceCalculationMethod.Default">
      <summary>
            Use the default calculation method.  Sphinx will use 'Haversine' in versions
            prior to 2.2.1 and 'Adaptive' starting with 2.2.1
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceCalculationMethod.Haversine">
      <summary>
            Use the Haversine algorithm (precise but also very calculation intensive).
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.GeodistanceCalculationMethod.Adaptive">
      <summary>
            Use the Polar flat-Earth algorithm (good precisison, though not as good as Haversine, but very fast). 
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.IAdvancedOperations">
      <summary>
            Exposes advanced operations.
            </summary>
      <seealso cref="P:SphinxConnector.FluentApi.IFulltextSession.Advanced" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IAdvancedOperations.AttachIndex(System.String,System.String)">
      <summary>
            Attach a disk-index to a real-time index. 
            </summary>
      <param name="diskIndexName">The name of the disk-index to attach.</param>
      <param name="realTimeIndexName">The name of the real-time index to attach to.</param>
      <exception cref="T:System.ArgumentException">Occurs if <paramref name="diskIndexName" /> or <paramref name="realTimeIndexName" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">Occurs if <paramref name="diskIndexName" /> or <paramref name="realTimeIndexName" /> is null.</exception>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the operation.</exception>
      <seealso href="http://sphinxsearch.com/docs/current.html#sphinxql-attach-index" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IAdvancedOperations.CreateFunction(System.String,System.String,SphinxConnector.FluentApi.UdfReturnType)">
      <summary>
            Installs the user-defined function with the given name and type from the given library file name.
            </summary>
      <param name="functionName">The name under which the function is registered.</param>
      <param name="libraryfileName">The name of the library file that contains the function.</param>
      <param name="returnType">The type that is returned from the function.</param>
      <exception cref="T:System.ArgumentException">Occurs if <paramref name="functionName" /> or <paramref name="libraryfileName" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">Occurs if <paramref name="functionName" /> or <paramref name="libraryfileName" /> is null.</exception>
      <seealso href="http://sphinxsearch.com/docs/current.html#sphinxql-create-function" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IAdvancedOperations.DropFunction(System.String)">
      <summary>
            Drops the user-defined function with the given name.
            </summary>
      <param name="functionName">The name of the function to drop.</param>
      <exception cref="T:System.ArgumentException">Occurs if <paramref name="functionName" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">Occurs if <paramref name="functionName" /> is null.</exception>
      <seealso href="http://sphinxsearch.com/docs/current.html#sphinxql-drop-function" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IAdvancedOperations.FlushIndex``1">
      <summary>
            Flush the real-time index that stores the given document type.
            </summary>
      <typeparam name="TDocument">The type of document for which the index should be flushed.</typeparam>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the operation.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IAdvancedOperations.FlushIndex(System.String)">
      <summary>
            Flush the real-time index with the given name.
            </summary>
      <param name="indexName">The name of the index to flush.</param>
      <exception cref="T:System.ArgumentException">Occurs if <paramref name="indexName" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">Occurs if <paramref name="indexName" /> is null.</exception>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the operation.</exception>
      <seealso href="http://sphinxsearch.com/docs/current.html#sphinxql-flush-rtindex" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IAdvancedOperations.OptimizeIndex``1">
      <summary>
            Optimize the real-time index that stores the given document type. Supported with Sphinx 2.1 and up.
            </summary>
      <typeparam name="TDocument">The type of document for which the index should be optimized.</typeparam>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the operation.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IAdvancedOperations.OptimizeIndex(System.String)">
      <summary>
            Optimize the real-time index with the given name. Supported with Sphinx 2.1 and up.
            </summary>
      <param name="indexName">The name of the index to optimize.</param>
      <exception cref="T:System.ArgumentException">Occurs if <paramref name="indexName" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">Occurs if <paramref name="indexName" /> is null.</exception>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the operation.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IAdvancedOperations.TruncateIndex``1">
      <summary>
            Truncate the real-time index that stores the given document type. Supported with Sphinx 2.1 and up.
            </summary>
      <typeparam name="TDocument">The type of document for which the index should be truncated.</typeparam>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the operation.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IAdvancedOperations.TruncateIndex(System.String)">
      <summary>
            Truncate the real-time index with the given name. Supported with Sphinx 2.1 and up.
            </summary>
      <param name="indexName">The name of the index to truncate.</param>
      <exception cref="T:System.ArgumentException">Occurs if <paramref name="indexName" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">Occurs if <paramref name="indexName" /> is null.</exception>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the operation.</exception>
    </member>
    <member name="T:SphinxConnector.FluentApi.FulltextException">
      <summary>
            The exception that is thrown if an error occurs in a full-text session
            </summary>
    </member>
    <member name="T:SphinxConnector.Common.SphinxException">
      <summary>
            Base class for Sphinx exceptions.
            </summary>
    </member>
    <member name="M:SphinxConnector.Common.SphinxException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.Common.SphinxException" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.Common.SphinxException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.Common.SphinxException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:SphinxConnector.Common.SphinxException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.Common.SphinxException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:SphinxConnector.Common.SphinxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.Common.SphinxException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.FulltextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.FluentApi.FulltextException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.FulltextException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:SphinxConnector.FluentApi.FulltextException.Statement">
      <summary>
            The statement that was being executed when the error occured (if any).
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.IFulltextQuery`1">
      <summary>
            Represents a Sphinx full-text query.
            </summary>
      <typeparam name="TDocument">The type of document for this query.</typeparam>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Project the results of this query into a new form.
            </summary>
      <typeparam name="TResult">The projected type.</typeparam>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>The current instance.</returns>
      <example>
            Suppose you have the following class representing a document in your index:
            <ProductSampleClass><code>
	public class Product
	{
		public int Id { get; set; }
	    public string Name { get; set; }
        public string Description { get; set; }
	    public decimal Price { get; set; }
        public int CategoryId { get; set; }
	    public int VendorId { get; set; }
		public int Weight { get; set; }
	}
	</code></ProductSampleClass><br />
            And you want to select only the name and price of a product:
            <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Match("a product").
                                              Select(p =&gt; new
                                              {
                                                  p.Name,
                                                  p.Price
                                              }).ToList();
             }
            </code></example>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.Match(System.String)">
      <summary>
            Match the documents with the given <paramref name="matchClause" />.
            </summary>
      <param name="matchClause">The clause to match documents with.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentException">Occurs, when <paramref name="matchClause" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">Occurs, when <paramref name="matchClause" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Occurs when this method called more than once for query.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
      <summary>
            Filter the results of this query by the given <paramref name="predicate" />.
            </summary>
      <param name="predicate">A function to test each document for a condition.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
      <summary>
            Filter the aggregated results of this query by the given <paramref name="predicate" />. Supported with Sphinx 2.2.1 and up.
            </summary>
      <param name="predicate">
      </param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Occurs when this method called more than once for query.</exception>
      <example>
        <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Match("a product").
                                              GroupBy(p =&gt; p.VendorId).
                                              Select(p =&gt; new
                                              {
                                                  p,
                                                  Count = Projection.Count()        
                                              }).
                                              Having(p =&gt; p.Count &gt; 1).
                                              ToList();
            }
            </code>
      </example>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Sort the results of this query by the given key in ascending order.
            </summary>
      <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector. </typeparam>
      <param name="keySelector">A function to extract the key from a document.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Sort the results of this query by the given key in descending order.
            </summary>
      <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector. </typeparam>
      <param name="keySelector">A function to extract the key from a document.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Sort the results of this query by the given key in ascending order.
            </summary>
      <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector. </typeparam>
      <param name="keySelector">A function to extract the key from a document.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="keySelector" /> is null.</exception>
      <remarks>This method is semantically equivalent to <see cref="M:SphinxConnector.FluentApi.IFulltextQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /></remarks>.
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="keySelector" /> is null.</exception></member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Sort the results of this query by the given key in descending order.
            </summary>
      <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
      <param name="keySelector">A function to extract the key from a document.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="keySelector" /> is null.</exception>
      <remarks>This method is semantically equivalent to <see cref="M:SphinxConnector.FluentApi.IFulltextQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /></remarks>.
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="keySelector" /> is null.</exception></member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Group the results of this query by the given key.
            </summary>
      <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
      <param name="keySelector">A function to extract the key from a document.</param>
      <returns>The current instance.</returns>
      <seealso cref="M:SphinxConnector.FluentApi.IFulltextQuery`1.WithinGroupOrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <seealso cref="M:SphinxConnector.FluentApi.IFulltextQuery`1.WithinGroupOrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="keySelector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Occurs when this method called more than once for query.</exception>
      <example>
            To group by multiple attributes, create an anonymous type with the attributes to group by: 
            <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Match("a product").
                                              GroupBy(p =&gt; new { p.CategoryId, p.VendorId }).
                                              Select(p =&gt; new
                                              {
                                                  p,
                                                  Count = Projection.Count()        
                                              }).ToList();
             }
            </code>
            Note that grouping by multiple attributes is only supported with Sphinx 2.1.2 and above.
            </example>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32)">
      <summary>
            Group the results of this query by the given key and return a given amount of results per group. Supported with Sphinx 2.2.1 and above.
            </summary>
      <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
      <param name="keySelector">A function to extract the key from a document.</param>
      <param name="maxResultsPerGroup">The (maximum) number of results to return per group.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="keySelector" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="maxResultsPerGroup" /> is less than one.</exception>
      <exception cref="T:System.InvalidOperationException">Occurs when this method called more than once for query.</exception>
      <example>
        <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Match("a product").
                                              GroupBy(p =&gt; p.CategoryId, 5).
                                              Select(p =&gt; new
                                              {
                                                  p.CategoryId,
                                                  p.Name,
                                                  p.Price                                               
                                              }).ToList();
             }
            </code>
      </example>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.WithinGroupOrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Sort the documents within a group by the given key in ascending order.
            </summary>
      <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
      <param name="keySelector">A function to extract the key from a document.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.WithinGroupOrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Sort the documents within a group by the given key in descending order.
            </summary>
      <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
      <param name="keySelector">A function to extract the key from a document.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.Take(System.Int32)">
      <summary>
            Return at most <paramref name="count" /> results for this query.
            </summary>
      <param name="count">The maximum number of results to return.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentException">Occurs when count is less or equal to zero.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.Limit(System.Int32,System.Int32)">
      <summary>
            Limits the results returned by this query.
            </summary>
      <param name="skip">The number of results to skip.</param>
      <param name="take">The maximum number of results to return.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentException">Occurs when skip is less than zero or take is less or equal to zero.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.Options(System.Action{SphinxConnector.FluentApi.IFulltextQueryOptions{`0}})">
      <summary>
            Change the options used for this query.
            </summary>
      <param name="optionSetter">A function to set the options.</param>
      <returns>The current instance.</returns>
      <example>
            Suppose you have the following class representing a document in your index:
            <ProductSampleClass><code>
	public class Product
	{
		public int Id { get; set; }
	    public string Name { get; set; }
        public string Description { get; set; }
	    public decimal Price { get; set; }
        public int CategoryId { get; set; }
	    public int VendorId { get; set; }
		public int Weight { get; set; }
	}
	</code></ProductSampleClass><br />
            And you want to set a custom field weight for the name attribute and set max matches to 50:
            <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Match("a product").
                                              Options(o =&gt; o.FieldWeight(x =&gt; x.Name, 1000).
                                                             MaxMatches(50)).
                                              ToList();
            }
            </code></example>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.WithSubquery``1(System.Linq.Expressions.Expression{System.Func{SphinxConnector.FluentApi.IFulltextQuery{`0},SphinxConnector.FluentApi.IFulltextQuery{``0}}})">
      <summary>
            Defines a subquery from which the results for this query are selected.
            </summary>
      <typeparam name="TSubqueryResult">The result type returned by the subquery.</typeparam>
      <param name="expression">The subquery expression.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.First">
      <summary>
            Execute this query and return the first result.
            </summary>
      <returns>An instance of <typeparamref name="TDocument" />.</returns>
      <remarks>This is equivalent to calling Limit(0, 1).ToList()</remarks>
      <exception cref="T:System.InvalidOperationException">The query returned no results.</exception>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the query.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.First(SphinxConnector.FluentApi.QueryMetadata@)">
      <summary>
            Execute this query and return the first result along with query meta data.
            </summary>
      <param name="metadata">The metadata for this query.</param>
      <returns>An instance of <typeparamref name="TDocument" />.</returns>
      <remarks>This is equivalent to calling Limit(0, 1).ToList()</remarks>
      <exception cref="T:System.InvalidOperationException">The query returned no results.</exception>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the query.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.FirstOrDefault">
      <summary>
            Execute this query and return the first result or the default value for the given type, if no results were found.
            </summary>
      <returns>An instance of <typeparamref name="TDocument" /> or the default value for the given type.</returns>
      <remarks>This is equivalent to calling Limit(0, 1).ToList()</remarks>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the query.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.FirstOrDefault(SphinxConnector.FluentApi.QueryMetadata@)">
      <summary>
            Execute this query and return the first result or the default value for the given type, if no results were found along with query metadata.
            </summary>
      <param name="metadata">The metadata for this query.</param>
      <returns>An instance of <typeparamref name="TDocument" /> or the default value for the given type.</returns>
      <remarks>This is equivalent to calling Limit(0, 1).ToList()</remarks>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the query.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.ToList">
      <summary>
            Execute this query and return the list of results.
            </summary>
      <returns>The results of the query.</returns>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the query.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQuery`1.ToList(SphinxConnector.FluentApi.QueryMetadata@)">
      <summary>
            Execute this query and return the list of results along with query metadata.
            </summary>
      <param name="metadata">The metadata for this query.</param>
      <returns>The results of the query.</returns>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the query.</exception>
      <example>
            Suppose you have the following class representing a document in your index:
            <ProductSampleClass><code>
	public class Product
	{
		public int Id { get; set; }
	    public string Name { get; set; }
        public string Description { get; set; }
	    public decimal Price { get; set; }
        public int CategoryId { get; set; }
	    public int VendorId { get; set; }
		public int Weight { get; set; }
	}
	</code></ProductSampleClass><br />
            And you want to retrieve the meta data along with the query:
            <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                QueryMetadata metadata;
            
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Match("a product").        
                                              ToList(out metadata);
            }
            </code></example>
    </member>
    <member name="T:SphinxConnector.FluentApi.IFulltextQueryOptions`1">
      <summary>
            Provides methods to set the options for a query.
            </summary>
      <typeparam name="TDocument">The type of document to set options for.</typeparam>
      <threadsafety instance="false" />
      <seealso href="http://sphinxsearch.com/docs/current.html#sphinxql-select" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.FieldWeight``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32)">
      <summary>
            Sets a weight for the selected field.
            </summary>
      <typeparam name="TField">The type of field to set a weight for.</typeparam>
      <param name="fieldSelector">A function to select the field for which the weight should be set.</param>
      <param name="weight">The weight to set for the field.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.FieldWeight(System.String,System.Int32)">
      <summary>
            Sets a weight for the field with the given name.
            </summary>
      <param name="fieldName">The name of the field for which the weight should be set.</param>
      <param name="weight">The weight to set for the field.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentException">Occurs when the field name is empty.</exception>
      <exception cref="T:System.ArgumentNullException">Occurs when the field name is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.IndexWeight(System.String,System.Int32)">
      <summary>
            Sets a weight for the index with the given name.
            </summary>
      <param name="indexName">The name of the index for which the weight should be set.</param>
      <param name="weight">The weight to set for the index.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.MaxQueryTime(System.TimeSpan)">
      <summary>
            Set the maximum execution time for a query.
            </summary>
      <param name="timeSpan">The maximum execution time.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.MaxMatches(System.Int32)">
      <summary>
            Sets the maximum number of matches for a query.
            </summary>
      <param name="count">The maximum number of matches.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.CutOff(System.Int32)">
      <summary>
            Sets a threshold on how many found matches to process.
            </summary>
      <param name="count">The threshold.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.RetryCount(System.Int32)">
      <summary>
            The number of retries for a distributed query.
            </summary>
      <param name="count"> The number of retries.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.RetryDelay(System.TimeSpan)">
      <summary>
            The delay between retries for a distributed query.
            </summary>
      <param name="timeSpan">The delay between retries.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.Ranker(SphinxConnector.Common.SphinxRankMode,System.String)">
      <summary>
            Sets the ranker to use for this query.
            </summary>
      <param name="rankMode">The rank mode to use for this query.</param>
      <param name="expression">The expression to use in conjunction with <see cref="F:SphinxConnector.Common.SphinxRankMode.Expression" />.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentException">
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.ReverseScan(System.Boolean)">
      <summary>
            Sets a value whether to use a reverse scan for a full-scan query.
            </summary>
      <param name="reverseScan">Whether to use a reverse scan</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.Comment(System.String)">
      <summary>
            Sets a comment the for the query.
            </summary>
      <param name="comment">The comment to set for the query.</param>
      <returns>The current instance.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when the provided string is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.IgnoreNonexistentIndexes(System.Boolean)">
      <summary>
            Sets a value whether to ignore non-existent indexes for the query. Supported with Sphinx 2.1.1 and up.
            </summary>
      <param name="ignoreNonexistentIndexes">Whether to ignore non-existent indexes.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.BooleanSimplify(System.Boolean)">
      <summary>
            Sets a value whether to simplify boolean expressions in a query. Supported with Sphinx 2.1.1 and up.
            </summary>
      <param name="booleanSimplify">Whether to simplify boolean expressions in a query.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.SortMethod(SphinxConnector.Common.SortMethod)">
      <summary>
            Sets the sort method for the query. Supported with Sphinx 2.1.1 and up.
            </summary>
      <param name="sortMethod">The sort method to set.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.Idf(SphinxConnector.Common.Idf)">
      <summary>
            Determines the way the IDF (Inverse Document Frequency) is calculated. Supported with Sphinx 2.1.1 and up.
            </summary>
      <param name="idf">The method to use to calculate the IDF.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.TfIdf(SphinxConnector.Common.TfIdf)">
      <summary>
            Determines the way the tf-idf (Term Frequency–Inverse Document Frequency) is calculated. Supported with Sphinx 2.2.1 and up.
            </summary>
      <param name="tfIdf">The method to use to calculate the tf-idf.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.UseGlobalIdf(System.Boolean)">
      <summary>
            Sets a value indicating whether to use global statistics (frequencies) from the global_idf file for IDF computations, rather than the local index statistics. Supported with Sphinx 2.1.1 and up.
            </summary>
      <param name="useGlobalIdf">Whether to use global statistics.</param>
      <returns>The current instance.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#conf-global-idf" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.MaxPredictedQueryTime(System.TimeSpan)">
      <summary>
            Sets the maximum predicted time for a query. Supported with Sphinx 2.1.1 and up.
            </summary>
      <param name="timeSpan">The maximum predicted time.</param>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.RandSeed(System.Int32)">
      <summary>
            Sets a specific seed value for an OrderBy(x =&gt; Function.Rand()) query.
            </summary>
      <param name="value">The value to use as seed.</param>
      <returns>The current instance.</returns>
      <seealso cref="M:SphinxConnector.FluentApi.Function.Rand" />
    </member>
    <member name="T:SphinxConnector.FluentApi.IFulltextSession">
      <summary>
            Represents a full-text session.
            </summary>
      <example>
        <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                //Do stuff with session
            }
            </code>
      </example>
      <seealso cref="M:SphinxConnector.FluentApi.IFulltextStore.StartSession" />
      <threadsafety instance="false" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.Delete``1(System.Int32[])">
      <summary>
             Schedule the documents with the given id(s) for deletion. The documents will be deleted when <see cref="M:SphinxConnector.FluentApi.IFulltextSession.FlushChanges" /> is called.
             </summary>
      <param name="documentIds">The id(s) of the document(s) to delete.</param>
      <typeparam name="TDocument">The type of document for which the ids are provied.</typeparam>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="documentIds" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">Occurs when the session has already been disposed.</exception>
      <example>
             Delete the documents with the id's 4, 8, and 15:
             <code>
             using (IFulltextSession fulltextSession = fulltextStore.StartSession())
             {
                 fulltextSession.Delete&lt;Product&gt;(4, 8, 15);
            
                 fulltextSession.FlushChanges();
             }
             </code></example>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.Delete``1(System.Int64[])">
      <summary>
             Schedule the documents with the given id(s) for deletion. The documents will be deleted when <see cref="M:SphinxConnector.FluentApi.IFulltextSession.FlushChanges" /> is called.
             </summary>
      <param name="documentIds">The id(s) of the document(s) to delete.</param>
      <typeparam name="TDocument">The type of document for which the ids are provied.</typeparam>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="documentIds" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">Occurs when the session has already been disposed.</exception>
      <example>
             Delete the documents with the id's 4, 8, and 15:
             <code>
             using (IFulltextSession fulltextSession = fulltextStore.StartSession())
             {
                 fulltextSession.Delete&lt;Product&gt;(4, 8, 15);
            
                 fulltextSession.FlushChanges();
             }
             </code></example>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.Delete``1(System.Decimal[])">
      <summary>
             Schedule the documents with the given id(s) for deletion. The documents will be deleted when <see cref="M:SphinxConnector.FluentApi.IFulltextSession.FlushChanges" /> is called.
             </summary>
      <param name="documentIds">The id(s) of the document(s) to delete.</param>
      <typeparam name="TDocument">The type of document for which the ids are provied.</typeparam>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="documentIds" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">Occurs when the session has already been disposed.</exception>
      <example>
             Delete the documents with the id's 4, 8, and 15:
             <code>
             using (IFulltextSession fulltextSession = fulltextStore.StartSession())
             {
                 fulltextSession.Delete&lt;Product&gt;(4, 8, 15);
            
                 fulltextSession.FlushChanges();
             }
             </code></example>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.Delete``1(``0)">
      <summary>
             Schedules the given document for deletion. The document will be deleted when <see cref="M:SphinxConnector.FluentApi.IFulltextSession.FlushChanges" /> is called.
             </summary>
      <typeparam name="TDocument">The type of document to delete.</typeparam>
      <param name="document">The document to delete.</param>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="document" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">Occurs when the session has already been disposed.</exception>
      <example>
             Delete a given document instance:
             <code>        
             private void DeleteProduct(Product productToDelete)
             { 
                 using (IFulltextSession fulltextSession = fulltextStore.StartSession())
                 {
                     fulltextSession.Delete(productToDelete);
            
                     fulltextSession.FlushChanges();
                 }
             }
             </code></example>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.FlushChanges">
      <summary>
            Flushes all pending changes, i.e. all changes made via <c>Save</c> and <c>Delete</c>
            since the start of the session or since the last call to <see cref="M:SphinxConnector.FluentApi.IFulltextSession.FlushChanges" />. All statements
            are executed within one transaction.
            </summary>
      <exception cref="T:System.ObjectDisposedException">Occurs when the session has already been disposed.</exception>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the queries.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.Save(System.Object)">
      <summary>
            Save the given document when <see cref="M:SphinxConnector.FluentApi.IFulltextSession.FlushChanges" /> is called.
            </summary>
      <param name="document">The document to save.</param>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="document" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Occurs in case the document does not have a valid id and no
            <see cref="P:SphinxConnector.FluentApi.ConventionConfiguration.DocumentIdGenerator" /> is configured.</exception>
      <exception cref="T:System.ObjectDisposedException">Occurs when the session has already been disposed.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.Save``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Save the given documents when <see cref="M:SphinxConnector.FluentApi.IFulltextSession.FlushChanges" /> is called.
            </summary>
      <param name="documents">An enumerable of documents to save.</param>
      <typeparam name="TDocument">The type of document to save.</typeparam>
      <exception cref="T:System.ArgumentException">Occurs when one of the documents is null.</exception>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="documents" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Occurs in case the document does not have a valid id and no
            <see cref="P:SphinxConnector.FluentApi.ConventionConfiguration.DocumentIdGenerator" /> is configured.</exception>
      <exception cref="T:System.ObjectDisposedException">Occurs when the session has already been disposed.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.Query``1">
      <summary>
            Create a new query for the document of the given type.
            </summary>
      <typeparam name="TDocument">The type of document to create a query for.</typeparam>
      <returns>An instance of <see cref="T:SphinxConnector.FluentApi.IFulltextQuery`1" /></returns>
      <exception cref="T:System.ObjectDisposedException">Occurs when the session has already been disposed.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.BuildSnippets``1(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Builds snippets for the given data using the text processing settings from the index for the given
            document type.
            </summary>
      <typeparam name="TDocument">The document type.</typeparam>
      <param name="data">The data to build snippets for.</param>
      <param name="query">The query to build snippets for.</param>
      <returns>A list of strings with the snippets.</returns>
      <exception cref="T:System.ObjectDisposedException">Occurs when the session has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
            One of <paramref name="data" /> or <paramref name="query" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="query" /> is empty.</exception>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the query.</exception>
      <example>
            Suppose you have the following class representing a document in your index:
            <ProductSampleClass><code>
	public class Product
	{
		public int Id { get; set; }
	    public string Name { get; set; }
        public string Description { get; set; }
	    public decimal Price { get; set; }
        public int CategoryId { get; set; }
	    public int VendorId { get; set; }
		public int Weight { get; set; }
	}
	</code></ProductSampleClass><br /><code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                QueryMetadata metadata;
            
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Match("my query").        
                                              ToList();
               
                var descriptionSnippets = fulltextSession.BuildSnippets&lt;Product&gt;(results.Select(p =&gt; p.Description), "my query");        
            }
            </code></example>
      <seealso cref="M:SphinxConnector.FluentApi.Util.StringExtensions.GetSnippet(System.String,System.String)" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.BuildSnippets``1(System.Collections.Generic.IEnumerable{System.String},System.String,SphinxConnector.FluentApi.SnippetsOptions)">
      <summary>
            Builds snippets for the given data using the text processing settings from the index for the given
            document type.
            </summary>
      <typeparam name="TDocument">The document type to build snippets for. This determines the index to take the text processing settings from.</typeparam>
      <param name="data">The data to build snippets for.</param>
      <param name="query">The query to build snippets for.</param>
      <param name="options">The options to use.</param>
      <returns>A list of strings with the snippets.</returns>
      <exception cref="T:System.ObjectDisposedException">Occurs when the session has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
            One of <paramref name="data" />, <paramref name="query" /> or <paramref name="options" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="query" /> is empty.</exception>
      <exception cref="T:SphinxConnector.FluentApi.FulltextException">Occurs when there is an error during the execution of the query.</exception>
      <example>
            Suppose you have the following class representing a document in your index:
            <ProductSampleClass><code>
	public class Product
	{
		public int Id { get; set; }
	    public string Name { get; set; }
        public string Description { get; set; }
	    public decimal Price { get; set; }
        public int CategoryId { get; set; }
	    public int VendorId { get; set; }
		public int Weight { get; set; }
	}
	</code></ProductSampleClass><br /><code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                QueryMetadata metadata;
            
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Match("my query").        
                                              ToList();
               
                var descriptionSnippets = fulltextSession.BuildSnippets&lt;Product&gt;(results.Select(p =&gt; p.Description), "my query", new SnippetsOptions
                                                                                                              {
                                                                                                                  BeforeMatch = "&lt;i&gt;",
                                                                                                                  AfterMatch = "&lt;/i&gt;",
                                                                                                                  HtmlStripMode = HtmlStripMode.Strip
                                                                                                             }););        
            }
            </code></example>
      <seealso cref="M:SphinxConnector.FluentApi.Util.StringExtensions.GetSnippet(System.String,System.String,SphinxConnector.FluentApi.SnippetsOptions)" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.BuildKeywords``1(System.String)">
      <summary>
            Builds tokenized and normalized forms and statistics for the keywords extracted from the <paramref name="text" />.
            </summary>
      <typeparam name="TDocument">The document type to build keywords for. This determines the index to take the text processing settings from.</typeparam>
      <param name="text">The text to break down to keywords</param>
      <returns>A list of keywords.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.GetSuggestions``1(System.String)">
      <summary>
            Gets a suggestion for the given word or query. In case of a single word Sphinx' SUGGEST() function is used, in case
            of a query (multiple words), QSUGGEST() is used.
            </summary>
      <typeparam name="TDocument">The document type to get suggestions for.</typeparam>
      <param name="wordOrQuery">The word or query to get suggestions for.</param>
      <returns>A list of suggestions.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextSession.GetSuggestions``1(System.String,SphinxConnector.FluentApi.SuggestionOptions)">
      <summary>
            Gets a suggestion for the given word or query. In case of a single word Sphinx' SUGGEST() function is used, in case
            of a query (multiple words), QSUGGEST() is used. 
            </summary>
      <typeparam name="TDocument">The document type to get suggestions for.</typeparam>
      <param name="wordOrQuery">The word or query to get suggestions for.</param>
      <param name="suggestionOptions">The options to use.</param>
      <returns>A list of suggestions.</returns>
    </member>
    <member name="P:SphinxConnector.FluentApi.IFulltextSession.Advanced">
      <summary>
            Provides access to advanced index operations.
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.FulltextSessionContext">
      <summary>
            Provides information about the current operation performed by an <see cref="T:SphinxConnector.FluentApi.IFulltextSession" />.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="P:SphinxConnector.FluentApi.FulltextSessionContext.OperationType">
      <summary>
            Gets the type of the operation.
            </summary>
      <value>The type of the operation.</value>
    </member>
    <member name="T:SphinxConnector.FluentApi.FulltextStore">
      <summary>
            Provides access to Sphinx.
            </summary>
      <threadsafety static="true" instance="true" />
    </member>
    <member name="T:SphinxConnector.FluentApi.IFulltextStore">
      <summary>
            Provides access to Sphinx. Used to create instances of <see cref="T:SphinxConnector.FluentApi.IFulltextSession" /> 
            and configuring the environment. 
            </summary>
      <threadsafety instance="true" />
      <example>
        <code>
            IFulltextStore fulltextStore = new FulltextStore().Initialize();
            fulltextStore.ConnectionString.IsThis("datasource=192.168.105;port=9306");
            
            using (IFulltextSession session = fulltextStore.StartSession())
            {
                //Do stuff with session
            }
            </code>
      </example>
      <seealso cref="T:SphinxConnector.FluentApi.IFulltextSession" />
      <seealso cref="T:SphinxConnector.FluentApi.IFulltextQuery`1" />
    </member>
    <member name="M:SphinxConnector.FluentApi.IFulltextStore.StartSession">
      <summary>
            Starts a new full-text session.
            </summary>
      <returns>An instance implementing <see cref="T:SphinxConnector.FluentApi.IFulltextSession" /></returns>
      <exception cref="T:System.InvalidOperationException">Occurs if <see cref="M:SphinxConnector.FluentApi.FulltextStore.Initialize" /> has not been called.</exception>
      <example>
        <code>
            IFulltextStore fulltextStore = new FulltextStore().Initialize();
            
            using (IFulltextSession session = fulltextStore.StartSession())
            {
                //Do stuff with session
            }
            </code>
      </example>
      <seealso cref="T:SphinxConnector.FluentApi.IFulltextSession" />
    </member>
    <member name="P:SphinxConnector.FluentApi.IFulltextStore.ConnectionString">
      <summary>
            Provides methods to configure a connection string for this instance. If no connection string is provided,
            the default will be used.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.IFulltextStore.Conventions">
      <summary>
            Gets the conventions used for index- and attributes names for session started by
            this instance.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.IFulltextStore.Settings">
      <summary>
            Gets the settings for this instance.
            </summary>
    </member>
    <member name="M:SphinxConnector.FluentApi.FulltextStore.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.FluentApi.FulltextStore" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.FluentApi.FulltextStore.Initialize">
      <summary>
            Initializes this instance.
            </summary>
      <returns>The current instance.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.FulltextStore.StartSession">
      <summary>
            Starts a new full-text session.
            </summary>
      <returns>An instance implementing <see cref="T:SphinxConnector.FluentApi.IFulltextSession" /></returns>
      <exception cref="T:System.InvalidOperationException">Occurs if <see cref="M:SphinxConnector.FluentApi.FulltextStore.Initialize" /> has not been called.</exception>
      <example>
        <code>
            IFulltextStore fulltextStore = new FulltextStore().Initialize();
            
            using (IFulltextSession session = fulltextStore.StartSession())
            {
                //Do stuff with session
            }
            </code>
      </example>
      <seealso cref="T:SphinxConnector.FluentApi.IFulltextSession" />
    </member>
    <member name="M:SphinxConnector.FluentApi.FulltextStore.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.FulltextStore.ConnectionString">
      <summary>
            Provides methods to configure a connection string for this instance. If no connection string is provided,
            the default will be used.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:SphinxConnector.FluentApi.FulltextStore.Conventions">
      <summary>
            Gets the conventions used to e.g. determine index- and attributes names for sessions started by
            this instance.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.FulltextStore.Settings">
      <summary>
            Gets the settings for this instance.
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.Function">
      <summary>
            Provides functions for use within the fluent query API. These methods are intended to be used
            with the methods provided by the <see cref="T:SphinxConnector.FluentApi.IFulltextQuery`1" /> interface.
            </summary>
      <remarks>
            These methods must not be used outside the fluent API, as they are only implemented as stubs.
            </remarks>
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.Bitdot``1(``0,System.Int32[])">
      <summary>
            Returns the sum of products of each bit of a <paramref name="mask" /> multiplied with its weight.
            </summary>
      <typeparam name="T">The type of the mask.</typeparam>
      <param name="mask">The bit mask.</param>
      <param name="weights">The weights for each bit.</param>
      <returns>The sum of products of each bit of a <paramref name="mask" /> multiplied with its weight.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.Fibonacci(System.Int32)">
      <summary>
            Calculates the n-th Fibonacci number.
            </summary>
      <param name="n">The Fibonacci number to calculate.</param>
      <returns>The n-th Fibonacci number</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.Crc32(System.String)">
      <summary>
            Calculates the CRC32 value for a string.
            </summary>
      <param name="value">The string to calculate the CRC32 for.</param>
      <returns>The CRC32 value for the given string.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.Geodist(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Calculates the geosphere distance between the two points given by their coordinates. The        
            coordinates must be provided in radians.
            </summary>
      <param name="latitude1">The latitude of the first point.</param>
      <param name="longitude1">The longitude of the first point.</param>
      <param name="latitude2">The latitude of the second point.</param>
      <param name="longitude2">The longitude of the second point.</param>
      <returns>The geosphere distance in meters.</returns>
      <seealso cref="T:SphinxConnector.FluentApi.GeodistanceOptions" />
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-geodist" />
      <example>
        <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {                
                var results = fulltextSession.Query&lt;Document&gt;().
                                              Select(x =&gt; new 
                                              {
                                                  Geodistance = Function.Geodist(40.7643929f, -73.9997683f, x.Latitude, x.Longitude)
                                              }).
                                              Where(x =&gt; x.Geodistance &lt; 10000).
                                              ToList();        
            }
            </code>
      </example>
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.Geodist(System.Single,System.Single,System.Single,System.Single,SphinxConnector.FluentApi.GeodistanceOptions)">
      <summary>
            Calculates the geosphere distance between the two points given by their coordinates.
            </summary>
      <param name="latitude1">The latitude of the first point.</param>
      <param name="longitude1">The longitude of the first point.</param>
      <param name="latitude2">The latitude of the second point.</param>
      <param name="longitude2">The longitude of the second point.</param>
      <param name="options">The options to use (supported with Sphinx 2.2.1 and up).</param>
      <returns>The geosphere distance in meters.</returns>
      <seealso cref="T:SphinxConnector.FluentApi.GeodistanceOptions" />
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-geodist" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.Rand">
      <summary>
            Returns a random value.
            </summary>
      <returns>A random value.</returns>
      <remarks>
            Currently only supported within <see cref="M:SphinxConnector.FluentApi.IFulltextQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /> and
            <see cref="M:SphinxConnector.FluentApi.IFulltextQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />.
            </remarks>
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.Idiv(System.Int32,System.Int32)">
      <summary>
            Returns the result of an integer division of the first argument by the second argument.
            </summary>
      <param name="a">The dividend.</param>
      <param name="b">The divisor.</param>
      <returns>The result of the integer division</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.Sint(System.Linq.Expressions.Expression{System.Func{System.Int64}})">
      <summary>
            Force Sphinx to reinterpret the given 32-bit unsigned integer argument as signed, and to also expand it to 64-bit type.
            </summary>
      <param name="expression">An expression to reinterpret.</param>
      <returns>The result of the expression reinterpreted as signed 64-bit type.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-sint" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.Sint(System.Int64)">
      <summary>
            Force Sphinx to reinterpret the given 32-bit unsigned integer argument as signed, and to also expand it to 64-bit type.
            </summary>
      <param name="value">A value to reinterpret.</param>
      <returns>The result of the expression reinterpreted as signed 64-bit type.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-sint" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.Exist``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
      <summary>
            Returns the value of the attribute if it exists in the index(es), otherwise returns the provided default value.
            </summary>
      <typeparam name="T">The type of the attribute.</typeparam>
      <param name="keySelector">A function to extract the attribute from a document.</param>
      <param name="defaultValue">The value that is returned in case the attribute does not exist.</param>
      <returns>The value of the attribute, or a default values if it does not exist.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.GroupBy``1">
      <summary>
            Returns the value by which a grouping was made.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <returns>The value by which a grouping was made.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.ZonespanList">
      <summary>
            Returns pairs of matched zone spans.
            </summary>
      <returns>Pairs of matched zone spans.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.MinTopWeight">
      <summary>
            Returns the weight of the worst found element in the current top-N matches.
            </summary>
      <returns>The weight of the worst found element in the current top-N matches.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-min-top-weight" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.MinTopSortValue">
      <summary>
            Returns the sort key value of the worst found element in the current top-N matches if sort key is float and 0 otherwise.
            </summary>
      <returns>The sort key value of the worst found element in the current top-N matches if sort key is float and 0 otherwise</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-min-top-sortval" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Function.PackedFactors">
      <summary>
            Can be used in queries to see all the weighting factors calculated when doing the matching. This function works only if 
            expression ranker is specified and the query is not a full scan, otherwise it will return an error.
            </summary>
      <returns>A string containing the ranking factors.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-packedfactors" />
    </member>
    <member name="T:SphinxConnector.FluentApi.Json.JsonObjectSerializer">
      <summary>
            Base class for JSON object serializers.
            </summary>
      <seealso cref="P:SphinxConnector.FluentApi.Settings.JsonObjectSerializer" />
      <seealso cref="T:SphinxConnector.FluentApi.Json.JsonValueConverter" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Json.JsonObjectSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.FluentApi.Json.JsonObjectSerializer" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.FluentApi.Json.JsonObjectSerializer.Serialize(System.Object)">
      <summary>
            Serialize the given object to JSON.
            </summary>
      <param name="obj">The object to serialize.</param>
      <returns>A JSON string representing the given object.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Json.JsonObjectSerializer.Deserialize(System.String,System.Type)">
      <summary>
            Deserialize the given JSON string to an object of the given type.
            </summary>
      <param name="json">The JSON string to construct the result from.</param>
      <param name="type">The type to construct from the JSON string.</param>
      <returns>The constructed object.</returns>
    </member>
    <member name="P:SphinxConnector.FluentApi.Json.JsonObjectSerializer.ValueConverters">
      <summary>
            A collection of custom JSON value converters.
            </summary>
      <seealso cref="T:SphinxConnector.FluentApi.Json.JsonValueConverter" />
    </member>
    <member name="T:SphinxConnector.FluentApi.Json.JsonValueConverter">
      <summary>
            Base class for custom JSON value converters.
            </summary>
    </member>
    <member name="M:SphinxConnector.FluentApi.Json.JsonValueConverter.CanConvert(System.Type)">
      <summary>
            Determines whether the implementing class can convert a value of the given type to JSON.
            </summary>
      <param name="type">The type of value to convert.</param>
      <returns>
        <b>true</b> if the implementor can convert the given type, otherwise <b>false</b>.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Json.JsonValueConverter.ConvertToString(System.Object)">
      <summary>
            Converts the given object to a JSON string.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>The JSON representation of the value.</returns>
    </member>
    <member name="T:SphinxConnector.FluentApi.Util.StringExtensions">
      <summary>
            Provides extensions methods for <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.StringExtensions.GetSnippet(System.String,System.String)">
      <summary>
            Gets a snippet for an attribute or a string.
            </summary>
      <param name="highlightSource">The attribute or text to highlight.</param>
      <param name="query">The query.</param>
      <returns>The highlighted text.</returns>
      <example>
        <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                string query = "my query";
            
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Match(query).
                                              Select(product =&gt; new
                                              {
                                                  product.Id,
                                                  product.Name,
                                                  Snippet = product.Description.GetSnippet(query)
                                              }).ToList();
            }
            </code>
      </example>
    </member>
    <member name="T:SphinxConnector.FluentApi.Keyword">
      <summary>
            Provides tokenized and normalized forms of a keyword and keyword statistics. 
            </summary>
      <seealso cref="M:SphinxConnector.FluentApi.IFulltextSession.BuildKeywords``1(System.String)" />
    </member>
    <member name="P:SphinxConnector.FluentApi.Keyword.Normalized">
      <summary>
            Gets the normalized keyword. 
            </summary>
      <value>The normalized keyword.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.Keyword.Tokenized">
      <summary>
            Gets the tokenized keyword.
            </summary>
      <value>tokenized keyword.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.Keyword.DocumentCount">
      <summary>
            Gets the number of documents containing the keyword.
            </summary>
      <value>The number of documents containing the keyword.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.Keyword.HitCount">
      <summary>
            Gets the number of hits across the documents for the keyword.
            </summary>
      <value>The number of hits.</value>
    </member>
    <member name="T:SphinxConnector.FluentApi.OperationType">
      <summary>
            Indicates the type of operation.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.OperationType.Query">
      <summary>
            Indicates that the operation in progress is querying for documents.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.OperationType.Save">
      <summary>
            Indicates that the operation in progress is saving documents.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.OperationType.Delete">
      <summary>
            Indicates that the operation in progress is deleting documents.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.OperationType.BuildSnippets">
      <summary>
            Indicates that the operation in progress is building snippets.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.OperationType.BuildKeywords">
      <summary>
            Indicates that the operation in progress is building keywords.        
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.OperationType.FlushIndex">
      <summary>
            Indicates that the operation in progress is flushing an index.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.OperationType.OptimizeIndex">
      <summary>
            Indicates that the operation in progress is optimizing an index.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.OperationType.TruncateIndex">
      <summary>
            Indicates that the operation in progress is truncating an index.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.OperationType.Suggestions">
      <summary>
            Indicates that the operation in progress is getting suggestions.
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.Projection">
      <summary>
            Provides methods to project properties into new values. The methods are intended to be used
            with the methods provided by the <see cref="T:SphinxConnector.FluentApi.IFulltextQuery`1" /> interface.
            </summary>
      <example>
            Suppose you have the following class representing a document in your index:
            <ProductSampleClass><code>
	public class Product
	{
		public int Id { get; set; }
	    public string Name { get; set; }
        public string Description { get; set; }
	    public decimal Price { get; set; }
        public int CategoryId { get; set; }
	    public int VendorId { get; set; }
		public int Weight { get; set; }
	}
	</code></ProductSampleClass><br />
            The following code computes the number of products in a category that match a query:
            <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Match("a query").
                                              GroupBy(p =&gt; p.CategoryId).
                                              Select(p =&gt; new
                                              {
                                                  p.CategoryId,
                                                  ProductsInCategory = Projection.Count()
                                              }).
                                              ToList();
            }
            </code></example>
    </member>
    <member name="M:SphinxConnector.FluentApi.Projection.Count">
      <summary>
            Computes the number of occurences of a value in a sequence of values.
            </summary>
      <returns>The number of occurences.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Projection.Count``1">
      <summary>
            Computes the number of occurences of a value in a sequence of values.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <returns>The number of occurences.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Projection.CountDistinct``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Computes the number of distinct occurences of a value in a sequence of values.
            </summary>
      <typeparam name="TSource">The type of the member.</typeparam>
      <param name="expression">A function that returns the member to count distinct occurences for.</param>
      <returns>The number of distinct occurences.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="expression" /> is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.Projection.Avg``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Computes the average of a sequence of values.
            </summary>
      <typeparam name="TSource">The type of the member.</typeparam>
      <param name="expression">A function that returns the member to compute the average for.</param>
      <returns>The computed average.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="expression" /> is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.Projection.Min``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Computes the minimum of a sequence of values.
            </summary>
      <typeparam name="TResult">The type of the member.</typeparam>
      <param name="expression">A function that returns the member to find the minimum for.</param>
      <returns>The computed minimum.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="expression" /> is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.Projection.Max``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Computes the maximum of a sequence of values.
            </summary>
      <typeparam name="TResult">The type of the member.</typeparam>
      <param name="expression">A function that returns the member to find the maximum for.</param>
      <returns>The computed maximum.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="expression" /> is null.</exception>
    </member>
    <member name="M:SphinxConnector.FluentApi.Projection.Sum``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Computes the sum of a sequence of values.
            </summary>
      <typeparam name="TResult">The type of the member.</typeparam>
      <param name="expression">A function that returns the member to sum.</param>
      <returns>The computed sum.</returns>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="expression" /> is null.</exception>
    </member>
    <member name="T:SphinxConnector.FluentApi.QueryMetadata">
      <summary>
            Provides meta data information for a query.
            </summary>
    </member>
    <member name="M:SphinxConnector.FluentApi.QueryMetadata.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:SphinxConnector.FluentApi.QueryMetadata.Total">
      <summary>
            Gets the total number of matches for the query.
            </summary>
      <value>The total number of matches.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.QueryMetadata.TotalFound">
      <summary>
            Gets the total number of matches found for the query.
            </summary>
      <value>The total number of matches.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.QueryMetadata.Time">
      <summary>
            Gets the query execution time.
            </summary>
      <value>The query execution time.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.QueryMetadata.WordInfo">
      <summary>
            Gets a list containing the word infos for the query.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.QueryMetadata.IOStatistics">
      <summary>
            Gets the IO statistics for the query.
            </summary>
      <remarks>
            Supported with Sphinx 2.1.
            Needs to be explicitly enabled by starting searchd with the <b>--iostats</b> option. 
            </remarks>
      <seealso href="http://sphinxsearch.com/docs/current.html#ref-searchd" />
    </member>
    <member name="P:SphinxConnector.FluentApi.QueryMetadata.AgentIOStatistics">
      <summary>
            Gets the agent IO statistics for the query.
            </summary>
      <remarks>
            Supported with Sphinx 2.1.
            Needs to be explicitly enabled by starting searchd with the <b>--iostats</b> option. 
            </remarks>
      <seealso href="http://sphinxsearch.com/docs/current.html#ref-searchd" />
    </member>
    <member name="P:SphinxConnector.FluentApi.QueryMetadata.CpuStatistics">
      <summary>
            Gets the CPU statistics for the query.
            </summary>
      <remarks>
            Supported with Sphinx 2.1.
            Needs to be explicitly enabled by starting searchd with the <b>--cpustats</b> option.
            </remarks>
      <seealso href="http://sphinxsearch.com/docs/current.html#ref-searchd" />
    </member>
    <member name="P:SphinxConnector.FluentApi.QueryMetadata.AgentCpuStatistics">
      <summary>
            Gets the agent CPU statistics for the query.
            </summary>
      <remarks>
            Supported with Sphinx 2.1.
            Needs to be explicitly enabled by starting searchd with the <b>--cpustats</b> option.
            </remarks>
      <seealso href="http://sphinxsearch.com/docs/current.html#ref-searchd" />
    </member>
    <member name="P:SphinxConnector.FluentApi.QueryMetadata.Predictions">
      <summary>
            Gets the predictions for the query.
            </summary>
            /// <remarks>
            Supported with Sphinx 2.2.
            Only available if option max_predicted_time was set.
            </remarks><seealso cref="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.MaxPredictedQueryTime(System.TimeSpan)" /></member>
    <member name="T:SphinxConnector.FluentApi.Settings">
      <summary>
            Provides access to the settings.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="P:SphinxConnector.FluentApi.Settings.SaveBatchSize">
      <summary>
            Gets or sets the batch size that is used for save operations. Default is 16.
            </summary>
      <remarks>
            This setting controls how many documents are send to Sphinx within a single roundtrip.        
            </remarks>
    </member>
    <member name="P:SphinxConnector.FluentApi.Settings.JsonObjectSerializer">
      <summary>
            Gets or sets the serializer for JSON objects. The internal default serializer uses JSON.NET.        
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.SnippetsOptions">
      <summary>
            Represents the options for building snippets/excerpts.
            </summary>
    </member>
    <member name="M:SphinxConnector.FluentApi.SnippetsOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.FluentApi.SnippetsOptions" /> class.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.BeforeMatch">
      <summary>
            Gets or sets the string to insert before a match.  Starting with version 1.10-beta, a %PASSAGE_ID% macro 
            can be used in this string. The macro is replaced with an incrementing passage number within a current snippet. 
            Numbering starts at 1 by default but can be overridden with by setting <see cref="P:SphinxConnector.FluentApi.SnippetsOptions.StartPassageId" />. 
            In a multi-document call, %PASSAGE_ID% would restart at every given document. Default is &lt;b&gt;.
            </summary>
      <value>The string to insert before a match.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.AfterMatch">
      <summary>
            Gets or sets the string to insert after a match. Starting with version 1.10-beta, a %PASSAGE_ID% macro can be used in this string.
            Default is &lt;/b&gt;.
            </summary>
      <value>The string to insert after match.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.ChunkSeparator">
      <summary>
            Gets or sets the separator which will be used to separate chunks of
            text. Default is " ... ".
            </summary>
      <value>The chunk separator.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.Limit">
      <summary>
            Gets or sets the maximum snippet size. Default is 256.
            </summary>
      <value>The limit.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.Around">
      <summary>
            Gets or sets how much words to pick around each matching keywords block. Default is 5.
            </summary>
      <value>The number of words to pick around each matching keywords block.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.ExactPhrase">
      <summary>
            Gets or sets a value indicating whether to highlight exact query phrase matches only instead of individual keywords.
            Default is false.
            </summary>
      <value>
        <c>true</c> if to highlight exact query phrase matches; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.UseBoundaries">
      <summary>
            Gets or sets a value indicating whether to use boundaries. Default is false.
            </summary>
      <value>
        <c>true</c> if to use boundaries; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.WeightOrder">
      <summary>
            Gets or sets a value indicating whether to sort the extracted passages in order of relevance (decreasing weight), 
            or in order of appearance in the document (increasing position).
            Default is false.
            </summary>
      <value>
        <c>true</c> if to sort the extracted passages in order of relevance; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.QueryMode">
      <summary>
            Gets or sets a value indicating whether to handle the highlight words parameter of the BuildSnippets method
            as a query in extended syntax, or as a bag of words (default behavior).
            Default is false. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>
        <c>true</c> if the highlight words parameter should be handled as a query in extended syntax; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.ForceAllWords">
      <summary>
            Gets or sets a value indicating whether to ignores the snippet length limit until it includes all the keywords.
            Default is false. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>
        <c>true</c> if snippet length limit should be ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.LimitPassages">
      <summary>
            Limits the maximum number of passages that can be included into the snippet. Default is 0. 
            Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>The maximum number of passages that can be included into the snippet.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.LimitWords">
      <summary>
            Limits the maximum number of keywords that can be included into the snippet.
            Default is 0. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>The maximum number of keywords that can be included into the snippet.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.StartPassageId">
      <summary>
            Specifies the starting value of %PASSAGE_ID% macro (that gets detected and expanded in <see cref="P:SphinxConnector.FluentApi.SnippetsOptions.BeforeMatch" />,
            <see cref="P:SphinxConnector.FluentApi.SnippetsOptions.AfterMatch" />. Default is 1. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>The starting value of %PASSAGE_ID% macro.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.LoadFiles">
      <summary>
            Gets or sets a value indicating whether Whether to handle the data parameter of
            <see cref="M:SphinxConnector.FluentApi.IFulltextSession.BuildSnippets``1(System.Collections.Generic.IEnumerable{System.String},System.String)" /> 
            as data to extract snippets from (default behavior), or to treat it as file names, and load 
            data from specified files on the server side. Default is false. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>
        <c>true</c> to handle the documents parameter as a list of file names; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.LoadFilesScattered">
      <summary>
            The source files for snippets could be distributed among different agents, and the main daemon will merge
            together all non-erroneous results. Default is false. Supported in Sphinx 2.0.2 and above.
            </summary>
      <remarks>
        <see cref="P:SphinxConnector.FluentApi.SnippetsOptions.LoadFiles" /> must also be set to <c>true</c>.
            </remarks>
      <value>
        <c>true</c>if the source files for snippets could be distributed among different agents; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.HtmlStripMode">
      <summary>
            Gets or sets the HTML strip mode. Default is <see cref="F:SphinxConnector.Common.HtmlStripMode.Index" />.
            Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>The HTML strip mode.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.AllowEmpty">
      <summary>
            Gets or sets a value indicating whether to allow an empty string to be returned as highlighting 
            result when a snippet could not be generated (no keywords match, or no passages fit the limit). 
            By default, the beginning of original text would be returned instead of an empty string.
            Default is false. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>
        <c>true</c> to allow an empty string to be returned as highlighting result; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.EmitZones">
      <summary>
            Gets or sets a value indicatin whether to emit an HTML tag with an enclosing zone name before each passage. Default is false.
            Supported in Sphinx 2.0.1 and above.
            </summary>
    </member>
    <member name="P:SphinxConnector.FluentApi.SnippetsOptions.PassageBoundary">
      <summary>
            Ensures that passages do not cross a sentence, paragraph, or zone boundary (when used with an index that has the respective indexing settings enabled).
            Supported in Sphinx 2.0.1 and above.
            </summary>
    </member>
    <member name="T:SphinxConnector.Common.SortMethod">
      <summary>
            Indicates the sort mode that should be used for a query.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.SortMethod.PriorityQueue">
      <summary>
            Priority queue (default).
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.SortMethod.KBuffer">
      <summary>
            KBuffer gives faster sorting for already pre-sorted data, e.g. index data sorted by id.
            </summary>
    </member>
    <member name="T:SphinxConnector.Common.CpuStatistics">
      <summary>
            Provides CPU statistics for a query.
            </summary>
      <seealso cref="P:SphinxConnector.FluentApi.QueryMetadata.CpuStatistics" />
    </member>
    <member name="M:SphinxConnector.Common.CpuStatistics.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:SphinxConnector.Common.CpuStatistics.CpuTime">
      <summary>
            Gets the CPU time for a query.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.CpuStatistics.Enabled">
      <summary>
            Gets a value indicating whether CPU statistics were enabled for the query (to distinguish
            between values being zero or disabled CPU statistics).
            </summary>
      <remarks>
            This property returns <b>false</b> if Sphinx wasn't started with the --cpustats parameter.
            </remarks>
    </member>
    <member name="T:SphinxConnector.Common.IOStatistics">
      <summary>
            Provides I/O statistics for a query.
            </summary>
      <seealso cref="P:SphinxConnector.FluentApi.QueryMetadata.IOStatistics" />
    </member>
    <member name="M:SphinxConnector.Common.IOStatistics.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:SphinxConnector.Common.IOStatistics.ReadTime">
      <summary>
            The time spend reading.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.IOStatistics.ReadOperations">
      <summary>
            The number of read operations.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.IOStatistics.KilobytesRead">
      <summary>
            The number of kilobytes read.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.IOStatistics.WriteTime">
      <summary>
            The time spend writting.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.IOStatistics.WriteOperations">
      <summary>
            The number of write operations.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.IOStatistics.KilobytesWritten">
      <summary>
            The number of kilobytes written.
            </summary>
    </member>
    <member name="P:SphinxConnector.Common.IOStatistics.Enabled">
      <summary>
            Gets a value indicating whether IO statistics were enabled for the query (to distinguish
            between all values being zero or disabled IO statistics).
            </summary>
      <remarks>
            This property returns <b>false</b> if Sphinx wasn't started with the --iostats
            parameter.
            </remarks>
    </member>
    <member name="T:SphinxConnector.Common.LicenseException">
      <summary>
            The exception that is thrown on a licensing error.
            </summary>
      <remarks>If you think that you receive this exception in error, 
            please contact us immediately so we can quickly resolve your issue!
            </remarks>
    </member>
    <member name="M:SphinxConnector.Common.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.Common.LicenseException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:SphinxConnector.Common.SphinxHelper">
      <summary>
            Provides helper methods.
            </summary>
    </member>
    <member name="M:SphinxConnector.Common.SphinxHelper.EscapeString(System.String)">
      <summary>
            Escapes characters in a string that are treated specially by Sphinx.
            </summary>
      <param name="value">The string to escape.</param>
      <returns>An instance of <see cref="T:System.String" /> with special characters escaped.</returns>
    </member>
    <member name="M:SphinxConnector.Common.SphinxHelper.DegreesToRadians(System.Single)">
      <summary>
            Converts the specified value from degrees to radians.
            </summary>
      <param name="degrees">The value to convert.</param>
      <returns>
        <paramref name="degrees" /> converted to radians.</returns>
    </member>
    <member name="M:SphinxConnector.Common.SphinxHelper.RadiansToDegress(System.Single)">
      <summary>
            Converts the specified value from radians to degrees.
            </summary>
      <param name="radians">The value to convert.</param>
      <returns>
        <paramref name="radians" /> converted to degrees.</returns>
    </member>
    <member name="T:SphinxConnector.Common.SphinxRankMode">
      <summary>
            Determines the rank mode searchd uses to rank matched documents. 
            </summary>
      <remarks>When used with the native API, <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.MatchMode" /> 
            must be set to <see cref="F:SphinxConnector.NativeApi.SphinxMatchMode.Extended" /> or <see cref="F:SphinxConnector.NativeApi.SphinxMatchMode.Extended2" />.
            </remarks>
      <seealso cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.RankMode" />
      <seealso cref="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.Ranker(SphinxConnector.Common.SphinxRankMode,System.String)" />
      <seealso href="http://sphinxsearch.com/docs/current.html#weighting">
      </seealso>
    </member>
    <member name="F:SphinxConnector.Common.SphinxRankMode.ProximityBM25">
      <summary>
            Default ranking mode which uses and combines both phrase proximity and BM25 ranking.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.SphinxRankMode.BM25">
      <summary>
            Statistical ranking mode which uses BM25 ranking only.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.SphinxRankMode.None">
      <summary>
            Disabled ranking mode. A weight of 1 is assigned to all matches. 
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.SphinxRankMode.WordCount">
      <summary>
            Ranks by keyword occurrences count.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.SphinxRankMode.Proximity">
      <summary>
            Returns raw phrase proximity value as a result.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.SphinxRankMode.MatchAny">
      <summary>
            Returns rank as it was computed in <see cref="F:SphinxConnector.NativeApi.SphinxMatchMode.Any" /> mode ealier, and is internally used to 
            emulate <see cref="F:SphinxConnector.NativeApi.SphinxMatchMode.Any" /> queries.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.SphinxRankMode.Fieldmask">
      <summary>
            Returns a 32-bit mask with N-th bit corresponding to N-th fulltext field, numbering from 0. 
            The bit will only be set when the respective field has any keyword occurences satisfiying the query.
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.SphinxRankMode.SPH04">
      <summary>
            Based on <see cref="F:SphinxConnector.Common.SphinxRankMode.ProximityBM25" /> ranker, but additionally boosts the matches when they occur in the very 
            beginning or the very end of a text field. Thus, if a field equals the exact query, SPH04 should rank it higher than 
            a field that contains the exact query but is not equal to it.        
            </summary>
    </member>
    <member name="F:SphinxConnector.Common.SphinxRankMode.Expression">
      <summary>
            Lets you specify the ranking formula at run time. It exposes a number of internal text factors and lets you 
            define how the final weight should be computed from those factors. 
            </summary>
      <seealso cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.RankingExpression" />
      <seealso cref="M:SphinxConnector.FluentApi.IFulltextQueryOptions`1.Ranker(SphinxConnector.Common.SphinxRankMode,System.String)" />
      <seealso href="http://sphinxsearch.com/docs/current.html#weighting" />
      <remarks>
            When used with the native API, <see cref="P:SphinxConnector.NativeApi.SphinxClient.Version" /> must be at least 2.0.2.
            </remarks>
    </member>
    <member name="F:SphinxConnector.Common.SphinxRankMode.Total">
      <summary>
      </summary>
    </member>
    <member name="T:SphinxConnector.Common.SphinxWordInfo">
      <summary>
            Provides statistical information about a word from a query.
            </summary>
    </member>
    <member name="M:SphinxConnector.Common.SphinxWordInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:SphinxConnector.Common.SphinxWordInfo.Word">
      <summary>
            Gets the word form as returned from searchd, stemmed or otherwise postprocessed.
            </summary>
      <value>The word.</value>
    </member>
    <member name="P:SphinxConnector.Common.SphinxWordInfo.MatchingDocumentsCount">
      <summary>
            Gets the number of matching documents for this word.
            </summary>
      <value>The matching documents count.</value>
    </member>
    <member name="P:SphinxConnector.Common.SphinxWordInfo.HitCount">
      <summary>
            Gets the number of hits for this word.
            </summary>
      <value>The hit count.</value>
    </member>
    <member name="T:SphinxConnector.FluentApi.UdfReturnType">
      <summary>
            Indicates which type is returned from a user-defined function (UDF).
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.UdfReturnType.Int">
      <summary>
            Indicates that the type returned is a 32-bit integer. 
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.UdfReturnType.BigInt">
      <summary>
            Indicates that the type returned is a 64-bit integer.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.UdfReturnType.Float">
      <summary>
            Indicates that the type returned is a single precision floating point number.
            </summary>
    </member>
    <member name="F:SphinxConnector.FluentApi.UdfReturnType.String">
      <summary>
            Indicates that the type returned is a string.
            </summary>
    </member>
    <member name="T:SphinxConnector.FluentApi.Util.EnumerableExtensions">
      <summary>
            Provides extensions methods for implementors of <see cref="T:System.Collections.Generic.IEnumerable`1" /></summary>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.EnumerableExtensions.In``1(System.Collections.Generic.IEnumerable{``0},``0[])">
      <summary>
            Returns true if <paramref name="enumerable" /> contains a value that is equal to any of the other arguments.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="enumerable" /> and <paramref name="values" />.</typeparam>
      <param name="enumerable">The values to check for equality.</param>
      <param name="values">The values to compare to.</param>
      <returns>
        <b>true</b> if the enumerable contains a value that is equal to any of the other arguments, otherwise <b>false</b>.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-in" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.EnumerableExtensions.In``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>
            Returns true if <paramref name="enumerable" /> contains a value that is equal to any elements in the user variable.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="enumerable" />.</typeparam>
      <param name="enumerable">The values to check for equality.</param>
      <param name="userVariable">The user variable.</param>
      <returns>
        <b>true</b> if the enumerable contains a value that is equal to any of the other arguments, otherwise <b>false</b>.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-in" />
      <example>
        <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Where(p =&gt; p.Categories.In("@my_user_var")).
                                              ToList();
            }
            </code>
      </example>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.EnumerableExtensions.In``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns true if <paramref name="enumerable" /> contains a value that is equal to any of the other arguments.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="enumerable" /> and <paramref name="values" />.</typeparam>
      <param name="enumerable">The values to check for equality.</param>
      <param name="values">The values to compare to.</param>
      <returns>
        <b>true</b> if the enumerable contains a value that is equal to any of the other arguments, otherwise <b>false</b>.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-in" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.EnumerableExtensions.NotIn``1(System.Collections.Generic.IEnumerable{``0},``0[])">
      <summary>
            Returns true if <paramref name="enumerable" />  does not contain a value that is equal to any of the other arguments.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="enumerable" /> and <paramref name="values" />.</typeparam>
      <param name="enumerable">The values to check for inequality.</param>
      <param name="values">The values to compare to.</param>
      <returns>
        <b>true</b> if the enumerable does not contain a value that is equal to any of the other arguments, otherwise <b>false</b>.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.EnumerableExtensions.NotIn``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns true if <paramref name="enumerable" /> does not contain a value that is equal to any of the other arguments.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="enumerable" /> and <paramref name="values" />.</typeparam>
      <param name="enumerable">The values to check for inequality.</param>
      <param name="values">The values to compare to.</param>
      <returns>
        <b>true</b> if the enumerable does not contain a value that is equal to any of the other arguments, otherwise <b>false</b>.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.EnumerableExtensions.NotIn``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>
            Returns true if <paramref name="enumerable" /> does not contain a value that is equal to any of the elements of the user variable.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="enumerable" />.</typeparam>
      <param name="enumerable">The values to check for inequality.</param>
      <param name="userVariable">The user variable.</param>
      <returns>
        <b>true</b> if the enumerable does not contain a value that is equal to any of the other arguments, otherwise <b>false</b>.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the index of the first element that matches the given predicate.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="enumerable" />.</typeparam>
      <param name="enumerable">The elements to check.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>The index of the first matching element, or -1 if no element matches.</returns>
    </member>
    <member name="T:SphinxConnector.FluentApi.Util.ObjectExtensions">
      <summary>
            Provides extensions methods for objects.
            </summary>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.ObjectExtensions.In``1(``0,``0[])">
      <summary>
            Returns true if <paramref name="obj" /> is equal to any of the other arguments.
            </summary>
      <typeparam name="T">The type of <paramref name="obj" /> and <paramref name="values" />.</typeparam>
      <param name="obj">The value to check for equality.</param>
      <param name="values">The values to compare to.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is equal to any of the other arguments, otherwise <b>false</b>.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-in" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.ObjectExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns true if <paramref name="obj" /> is equal to any of the other arguments.
            </summary>
      <typeparam name="T">The type of <paramref name="obj" /> and <paramref name="values" />.</typeparam>
      <param name="obj">The value to check for equality.</param>
      <param name="values">The values to compare to.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is equal to any of the other arguments, otherwise <b>false</b>.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-in" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.ObjectExtensions.In``1(``0,System.String)">
      <summary>
            Returns true if <paramref name="obj" /> is equal to at least one of the elements of the user variable.
            </summary>
      <typeparam name="T">The type of <paramref name="obj" />.</typeparam>
      <param name="obj">The value to check for inequality.</param>
      <param name="userVariable">The user variable.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is equal to one of the elements of the user variable, otherwise <b>false</b>.</returns>
      <example>
        <code>
            using (IFulltextSession fulltextSession = fulltextStore.StartSession())
            {
                var results = fulltextSession.Query&lt;Product&gt;().
                                              Where(p =&gt; p.VendorId.In("@my_user_var")).
                                              ToList();
            }
            </code>
      </example>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.ObjectExtensions.NotIn``1(``0,``0[])">
      <summary>
            Returns true if <paramref name="obj" /> is not equal to any of the other arguments.
            </summary>
      <typeparam name="T">The type of <paramref name="obj" /> and <paramref name="values" />.</typeparam>
      <param name="obj">The value to check for inequality.</param>
      <param name="values">The values to compare to.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is not equal to any of the other arguments, otherwise <b>false</b>.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.ObjectExtensions.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns true if <paramref name="obj" /> is not equal to any of the other arguments.
            </summary>
      <typeparam name="T">The type of <paramref name="obj" /> and <paramref name="values" />.</typeparam>
      <param name="obj">The value to check for inequality.</param>
      <param name="values">The values to compare to.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is not equal to any of the other arguments, otherwise <b>false</b>.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.ObjectExtensions.NotIn``1(``0,System.String)">
      <summary>
            Returns true if <paramref name="obj" /> is not equal to any of the elements of the user variable.
            </summary>
      <typeparam name="T">The type of <paramref name="obj" />.</typeparam>
      <param name="obj">The value to check for inequality.</param>
      <param name="userVariable">The user variable.</param>
      <returns>
        <b>true</b> if <paramref name="obj" /> is not equal to any of the elements of the user variable, otherwise <b>false</b>.</returns>
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.ObjectExtensions.Interval``1(``0,``0[])">
      <summary>
            Returns the index of the value that is less than <paramref name="obj" />.
            </summary>
      <typeparam name="T">The type of <paramref name="obj" /> and <paramref name="values" />.</typeparam>
      <param name="obj">The value to check.</param>
      <param name="values">The values defining the interval.</param>
      <returns>The index of the value that is less than <paramref name="obj" />.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-interval" />
    </member>
    <member name="M:SphinxConnector.FluentApi.Util.ObjectExtensions.Interval``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the index of the value that is less than <paramref name="obj" />.
            </summary>
      <typeparam name="T">The type of <paramref name="obj" /> and <paramref name="values" />.</typeparam>
      <param name="obj">The value to check.</param>
      <param name="values">The values defining the interval.</param>
      <returns>The index of the value that is less than <paramref name="obj" />.</returns>
      <seealso href="http://sphinxsearch.com/docs/current.html#expr-func-interval" />
    </member>
    <member name="T:SphinxConnector.NativeApi.Collections.SphinxAttributeMatchCollection">
      <summary>
            Represents a collection of attributes belonging to a document matched by a query.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxAttributeMatchCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxAttributeMatchCollection" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxAttributeMatchCollection.GetKeyForItem(SphinxConnector.NativeApi.SphinxAttributeMatch)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.Collections.SphinxAttributeMatchCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:SphinxConnector.NativeApi.SphinxAttributeMatch" /> with the specified attribute name.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1">
      <summary>
            Represents a map between document ids and user defined attribute values
            of type <typeparamref name="TOverridable" />.
            </summary>
      <typeparam name="TOverridable">The type of the attribute for which this map provides overrides.</typeparam>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetOverride``1(SphinxConnector.NativeApi.SphinxAttributeOverride{``0})" />
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1" /> class.
            </summary>
      <param name="capacity">The capacity.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1.#ctor(System.Collections.Generic.IEqualityComparer{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1" /> class.
            </summary>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1" /> class.
            </summary>
      <param name="capacity">The capacity.</param>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.Int64,`0})">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1" /> class.
            </summary>
      <param name="dictionary">The dictionary.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.Int64,`0},System.Collections.Generic.IEqualityComparer{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1" /> class.
            </summary>
      <param name="dictionary">The dictionary.</param>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxOverrideValuesDictionary`1" /> class.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
    </member>
    <member name="T:SphinxConnector.NativeApi.Collections.SphinxSearchResultCollection">
      <summary>
            Represents a collection of Sphinx search results.
            </summary>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.RunQueries" />
      <threadsafety static="true" instance="false" />
    </member>
    <member name="T:SphinxConnector.NativeApi.Collections.SphinxStatusInfoCollection">
      <summary>
            Represents a collection of status info objects.
            </summary>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.GetStatus" />
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxStatusInfoCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxStatusInfoCollection" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxStatusInfoCollection.GetKeyForItem(SphinxConnector.NativeApi.SphinxStatusInfo)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.Collections.SphinxStatusInfoCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:SphinxConnector.NativeApi.SphinxStatusInfo" /> with the specified variable name.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1">
      <summary>
            Represents a map between document ids and user defined attribute values of type <typeparamref name="TUpdateable" />.
            </summary>
      <typeparam name="TUpdateable">The type of the attribute for which this map provides updated values.</typeparam>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.UpdateAttributes``1(System.String,SphinxConnector.NativeApi.SphinxAttributeUpdate{``0}[])" />
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1" /> class.
            </summary>
      <param name="capacity">The capacity.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1.#ctor(System.Collections.Generic.IEqualityComparer{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1" /> class.
            </summary>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1" /> class.
            </summary>
      <param name="capacity">The capacity.</param>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.Int64,System.Collections.Generic.IEnumerable{`0}})">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1" /> class.
            </summary>
      <param name="dictionary">The dictionary.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.Int64,System.Collections.Generic.IEnumerable{`0}},System.Collections.Generic.IEqualityComparer{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1" /> class.
            </summary>
      <param name="dictionary">The dictionary.</param>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.Collections.SphinxUpdateValuesDictionary`1" /> class.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
    </member>
    <member name="T:SphinxConnector.NativeApi.QueryFlags">
      <summary>
            Additional query flags. Supported with Sphinx 2.1.1 and up.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.QueryFlags.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.QueryFlags" /> class.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.QueryFlags.SortMethod">
      <summary>
            Gets or sets the sort method to use for a query. Default is <b>PriorityQueue</b>.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.QueryFlags.BooleanSimplify">
      <summary>
            Gets or sets a value indicating whether to simplify boolean expressions in queries. Default is <b>false</b>.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.QueryFlags.ReverseScan">
      <summary>
            Gets or sets a value whether to the order in which full-scan query processes the rows. Default is <b>false</b>.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.QueryFlags.MaxPredictedQueryTime">
      <summary>
            Gets or sets the maximum predicted time for a query. This value is applied per index.
            Default is <see cref="F:System.TimeSpan.MaxValue" /> which means no limit.   
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.QueryFlags.Idf">
      <summary>
            Determines the way the IDF (Inverse Document Frequency) is calculated. Default is <b>Normalized</b>.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.QueryFlags.TfIdf">
      <summary>
            Determines the calculation method Sphinx uses for the tf–idf (term frequency–inverse document frequency). Default is <b>Normalized</b>. Supported with Sphinx 2.2.1 and up.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.QueryFlags.UseGlobalIdf">
      <summary>
            Gets or sets a value indicating whether to use global statistics (frequencies) from the global_idf file for IDF computations, rather than the local index statistics.
            </summary>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxString">
      <summary>
            Represents the Sphinx type string.
            </summary>
    </member>
    <member name="T:SphinxConnector.NativeApi.IFilterableType">
      <summary>
            Types that implement this interface can be used as type argument to the SetFilter() method. 
            </summary>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetFilter``1(System.String,``0[])" />
      <seealso cref="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetFilter``1(System.String,``0,System.Boolean)" />
      <seealso cref="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetFilterRange``1(System.String,``0,``0,System.Boolean)" />
    </member>
    <member name="T:SphinxConnector.NativeApi.ISphinxType">
      <summary>
            Interface every implementation for a Sphinx type must implement.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.ISphinxType.Value">
      <summary>
            Gets the value of the implementing type.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.ISphinxType.SupportedSince">
      <summary>
            Gets the version since when the implementing type is supported by Sphinx.
            </summary>
      <value>The version.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.ISphinxType.SphinxAttributeType">
      <summary>
            Gets the type of the sphinx attribute the implementing type represents.
            </summary>
      <value>The type of the sphinx attribute.</value>
    </member>
    <member name="M:SphinxConnector.NativeApi.IFilterableType.WriteValue(System.IO.BinaryWriter,System.Version)">
      <summary>
            Writes the value for filtering on the implementing type to the given BinaryWriter.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
      <param name="version">The version of Sphinx.</param>
    </member>
    <member name="P:SphinxConnector.NativeApi.IFilterableType.RequiredVersion">
      <summary>
            Gets the minimum required version for applying a filter to the implementing type.
            </summary>
      <value>The minimum required version.</value>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxString.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxString" /> struct.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxString.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxString.Equals(SphinxConnector.NativeApi.SphinxString)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxString.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxString.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxString.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxString.op_Equality(SphinxConnector.NativeApi.SphinxString,SphinxConnector.NativeApi.SphinxString)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxString.op_Inequality(SphinxConnector.NativeApi.SphinxString,SphinxConnector.NativeApi.SphinxString)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxString.op_Implicit(System.String)~SphinxConnector.NativeApi.SphinxString">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:SphinxConnector.NativeApi.SphinxString" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxString.Value">
      <summary>
            Gets the value of the current instance.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxString.SupportedSince">
      <summary>
            Gets the version since when this type is supported by Sphinx.
            </summary>
      <value>The version.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxString.SphinxAttributeType">
      <summary>
            Gets the type of the sphinx attribute this instance represents.
            </summary>
      <value>The type of the sphinx attribute.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.UpdateAttributesOptions">
      <summary>
            Represents the options for updating attributes.
            </summary>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.UpdateAttributes``1(System.String,SphinxConnector.NativeApi.SphinxAttributeUpdate{``0}[])" />
    </member>
    <member name="F:SphinxConnector.NativeApi.UpdateAttributesOptions.None">
      <summary>
            Indicates no additional parameters.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.UpdateAttributesOptions.IgnoreNonExistentColumn">
      <summary>
            Ignore non-existent column when updating attributes
            </summary>
    </member>
    <member name="T:SphinxConnector.SphinxConnectorLicensing">
      <summary>
            Provides methods to unlock all functions.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxConnectorLicensing.SetLicense(System.String)">
      <summary>
            Set the license.
            </summary>
      <param name="license">A string containing the license information.</param>
      <exception cref="T:SphinxConnector.Common.LicenseException">
                A problem occured during license validation.
            </exception>
    </member>
    <member name="T:SphinxConnector.NativeApi.BuildExcerptsOptions">
      <summary>
            Represents the options for the BuildExcerpts() method.
            </summary>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.BuildExcerpts(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,SphinxConnector.NativeApi.BuildExcerptsOptions)" />
      <seealso href="http://www.sphinxsearch.com/docs/current.html#api-func-buildexcerpts" />
    </member>
    <member name="M:SphinxConnector.NativeApi.BuildExcerptsOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.BuildExcerptsOptions" /> class.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.BeforeMatch">
      <summary>
            Gets or sets the string to insert before a match.  Starting with version 1.10-beta, a %PASSAGE_ID% macro 
            can be used in this string. The macro is replaced with an incrementing passage number within a current snippet. 
            Numbering starts at 1 by default but can be overridden with by setting <see cref="P:SphinxConnector.NativeApi.BuildExcerptsOptions.StartPassageId" />. 
            In a multi-document call, %PASSAGE_ID% would restart at every given document. Default is &lt;b&gt;.
            </summary>
      <value>The string to insert before a match.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.AfterMatch">
      <summary>
            Gets or sets the string to insert after a match. Starting with version 1.10-beta, a %PASSAGE_ID% macro can be used in this string.
            Default is &lt;/b&gt;.
            </summary>
      <value>The string to insert after match.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.ChunkSeparator">
      <summary>
            Gets or sets the separator which will be used to separate chunks of
            text. Default is " ... ".
            </summary>
      <value>The chunk separator.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.Limit">
      <summary>
            Gets or sets the maximum snippet size. Default is 256.
            </summary>
      <value>The limit.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.Around">
      <summary>
            Gets or sets how much words to pick around each matching keywords block. Default is 5.
            </summary>
      <value>The number of words to pick around each matching keywords block.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.ExactPhrase">
      <summary>
            Gets or sets a value indicating whether to highlight exact query phrase matches only instead of individual keywords.
            Default is false.
            </summary>
      <value>
        <c>true</c> if to highlight exact query phrase matches; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.SinglePassage">
      <summary>
            Gets or sets a value indicating whether to extract the single best passage only.
            Default is false.
            </summary>
      <value>
        <c>true</c> if to extract single best passage; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.UseBoundaries">
      <summary>
            Gets or sets a value indicating whether to use boundaries.
            </summary>
      <value>
        <c>true</c> if to use boundaries; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.WeightOrder">
      <summary>
            Gets or sets a value indicating whether to sort the extracted passages in order of relevance (decreasing weight), 
            or in order of appearance in the document (increasing position).
            Default is false.
            </summary>
      <value>
        <c>true</c> if to sort the extracted passages in order of relevance; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.QueryMode">
      <summary>
            Gets or sets a value indicating whether to handle the highlight words parameter of the BuildExcerpts method
            as a query in extended syntax, or as a bag of words (default behavior).
            Default is false. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>
        <c>true</c> if the highlight words parameter should be handled as a query in extended syntax; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.ForceAllWords">
      <summary>
            Gets or sets a value indicating whether to ignores the snippet length limit until it includes all the keywords.
            Default is false. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>
        <c>true</c> if snippet length limit should be ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.LimitPassages">
      <summary>
            Limits the maximum number of passages that can be included into the snippet. Default is 0. 
            Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>The maximum number of passages that can be included into the snippet.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.LimitWords">
      <summary>
            Limits the maximum number of keywords that can be included into the snippet.
            Default is 0. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>The maximum number of keywords that can be included into the snippet.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.StartPassageId">
      <summary>
            Specifies the starting value of %PASSAGE_ID% macro (that gets detected and expanded in <see cref="P:SphinxConnector.NativeApi.BuildExcerptsOptions.BeforeMatch" />,
            <see cref="P:SphinxConnector.NativeApi.BuildExcerptsOptions.AfterMatch" />. Default is 1. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>The starting value of %PASSAGE_ID% macro.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.LoadFiles">
      <summary>
            Gets or sets a value indicating whether Whether to handle the documents parameter of
            <see cref="M:SphinxConnector.NativeApi.SphinxClient.BuildExcerpts(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,SphinxConnector.NativeApi.BuildExcerptsOptions)" /> 
            as data to extract snippets from (default behavior), or to treat it as file names, and load 
            data from specified files on the server side. Default is false. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>
        <c>true</c> to handle the documents parameter as a list of file names; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.LoadFilesScattered">
      <summary>
            The source files for snippets could be distributed among different agents, and the main daemon will merge
            together all non-erroneous results. Default is false. Supported in Sphinx 2.0.2 and above.
            </summary>
      <remarks>
        <see cref="P:SphinxConnector.NativeApi.BuildExcerptsOptions.LoadFiles" /> must also be set to <c>true</c>.
            </remarks>
      <value>
        <c>true</c>if the source files for snippets could be distributed among different agents; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.HtmlStripMode">
      <summary>
            Gets or sets the HTML strip mode. Default is <see cref="F:SphinxConnector.Common.HtmlStripMode.Index" />.
            Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>The HTML strip mode.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.AllowEmpty">
      <summary>
            Gets or sets a value indicating whether to allow an empty string to be returned as highlighting 
            result when a snippet could not be generated (no keywords match, or no passages fit the limit). 
            By default, the beginning of original text would be returned instead of an empty string.
            Default is false. Supported in Sphinx 1.10.1 and above.
            </summary>
      <value>
        <c>true</c> to allow an empty string to be returned as highlighting result; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.EmitZones">
      <summary>
            Gets or sets a value indicatin whether to emit an HTML tag with an enclosing zone name before each passage. Default is false.
            Supported in Sphinx 2.0.1 and above.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.BuildExcerptsOptions.PassageBoundary">
      <summary>
            Ensures that passages do not cross a sentence, paragraph, or zone boundary (when used with an index that has the respective indexing settings enabled).
            Supported in Sphinx 2.0.1 and above.
            </summary>
    </member>
    <member name="T:SphinxConnector.NativeApi.IOverridableType">
      <summary>
            Types that implement this interface can be overriden via the SetOverride() method.
            </summary>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetOverride``1(SphinxConnector.NativeApi.SphinxAttributeOverride{``0})" />
    </member>
    <member name="M:SphinxConnector.NativeApi.IOverridableType.WriteValue(System.IO.BinaryWriter,System.Version)">
      <summary>
            Writes the value for overrides of the implementing type to the given BinaryWriter.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
      <param name="version">The version of Sphinx.</param>
    </member>
    <member name="P:SphinxConnector.NativeApi.IOverridableType.RequiredVersion">
      <summary>
            Gets the minimum required version for overriding the implementing type.
            </summary>
      <value>The minimum required version.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.IRangeFilterableType">
      <summary>
            Types that implement this interface can be used as a type argument to the SetFilterRange() method.
            </summary>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetFilterRange``1(System.String,``0,``0,System.Boolean)" />
    </member>
    <member name="M:SphinxConnector.NativeApi.IRangeFilterableType.WriteValue(System.IO.BinaryWriter,System.Version)">
      <summary>
            Writes the value for a range filter on the implementing type to the given BinaryWriter.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
      <param name="version">The version of Sphinx.</param>
    </member>
    <member name="P:SphinxConnector.NativeApi.IRangeFilterableType.RequiredVersion">
      <summary>
            Gets the minimum required version for applying a range filter to the implementing type.
            </summary>
      <value>The minimum required version.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.IUpdateableType">
      <summary>
            Types that implement this interface can be updated via the UpdateAttributes() method.
            </summary>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.UpdateAttributes``1(System.String,SphinxConnector.NativeApi.SphinxAttributeUpdate{``0}[])" />
    </member>
    <member name="M:SphinxConnector.NativeApi.IUpdateableType.WriteValue(System.IO.BinaryWriter,System.Version)">
      <summary>
            Writes the value for updates of the implementing type to the given BinaryWriter.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
      <param name="version">The version of Sphinx.</param>
    </member>
    <member name="P:SphinxConnector.NativeApi.IUpdateableType.RequiredVersion">
      <summary>
            Gets the minimum required version for updating the implementing type.
            </summary>
      <value>The minimum required version.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxAttributeMatch">
      <summary>
            Provides information about a matched attribute. 
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxAttributeMatch.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxAttributeMatch.AttributeName">
      <summary>
            Gets the name of the matched attribute.
            </summary>
      <value>The name of the attribute.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxAttributeMatch.AttributeType">
      <summary>
            Gets the type of the attribute.
            </summary>
      <value>The type of the attribute.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxAttributeMatch.AttributeValue">
      <summary>
            Gets the attribute value.
            </summary>
      <value>The attribute value.</value>
      <remarks>
            The actual type depends on type specified in the configuration for the index. 
            sql_attr_bool is mapped to bool,
            sql_attr_float is mapped to float,
            sql_attr_timestamp is mapped to DateTime,
            sql_attr_bigint is mapped to long,
            sql_attr_uint is mapped to long,
            sql_attr_str2ordinal is mapped to long,
            sql_attr_multi is mapped to long[] for all supported types.
            sql_attr_string is mapped to string
            </remarks>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxAttributeMatch.IsMultiValued">
      <summary>
            Gets a value indicating whether the attribute value is multi valued.
            </summary>
      <value>
        <c>true</c> if the attribute value is multi valued; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxAttributeOverride`1">
      <summary>
            Represents an attribute for which values should be overwritten.
            </summary>
      <typeparam name="TOverridable">The type of attribute to override.</typeparam>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetOverride``1(SphinxConnector.NativeApi.SphinxAttributeOverride{``0})" />
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxAttributeOverride`1.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxAttributeOverride`1" /> class.
            </summary>
      <param name="attributeName">The name of the attribute for which values should be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeName" /> is empty.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> is null.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxAttributeOverride`1.AddOverrideValue(System.Int64,`0)">
      <summary>
            Adds an override value for the document with the specified id.
            </summary>
      <param name="documentId">The document id.</param>
      <param name="value">The override value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="documentId" /> is negative.
            </exception>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxAttributeOverride`1.AttributeName">
      <summary>
            Gets the name of the attribute for which values should be overwritten.
            </summary>
      <value>The name of the attribute.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxAttributeOverride`1.OverrideValuesDictionary">
      <summary>
            Gets the dictionary which holds the override values and document ids for
            the attribute.
            </summary>
      <value>The override values dictionary.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxAttributeType">
      <summary>
            Indicates the type of a Sphinx attribute.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxAttributeType.Integer">
      <summary>
            Indicates that the attribute is of type integer.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxAttributeType.Timestamp">
      <summary>
            Indicates that the attribute is of type time stamp.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxAttributeType.Ordinal">
      <summary>
            Indicates that the attribute is of type ordinal.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxAttributeType.Bool">
      <summary>
            Indicates that the attribute is of type bool.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxAttributeType.Float">
      <summary>
            Indicates that the attribute is of type float.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxAttributeType.BigInt">
      <summary>
            Indicates that the attribute is of type big int.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxAttributeType.String">
      <summary>
            Indicates that the attribute is of type string.
            </summary>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxAttributeUpdate`1">
      <summary>
            Represents an attribute which should be updated with new values.
            </summary>
      <typeparam name="TUpdateable">The type of the attribute to update.</typeparam>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.UpdateAttributes``1(System.String,SphinxConnector.NativeApi.SphinxAttributeUpdate{``0}[])" />
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxAttributeUpdate`1.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxAttributeUpdate`1" /> class.
            </summary>
      <param name="attributeName">The name of the attribute for which this instance contains updated values.</param>
      <exception cref="T:System.ArgumentException">
      </exception>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxAttributeUpdate`1.AddUpdateValue(System.Int64,`0[])">
      <summary>
            Adds one or more update values for the document with the specified id to the <see cref="P:SphinxConnector.NativeApi.SphinxAttributeUpdate`1.UpdateValuesDictionary" />
            collection.
            </summary>
      <param name="documentId">The id document to add the updated values to.</param>
      <param name="values">A sequence containing the updates values.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" /> is empty.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="documentId" /> is negative.
            </exception>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxAttributeUpdate`1.AttributeName">
      <summary>
            Gets the name of the attribute for which this instance contains updated values.
            </summary>
      <value>The name of the attribute.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxAttributeUpdate`1.UpdateValuesDictionary">
      <summary>
            Gets the update values dictionary.
            </summary>
      <value>The update values dictionary.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxBigInt">
      <summary>
            Represents the Sphinx type big int.
            </summary>
      <remarks>
            Sphinx big int type is a signed 64-bit integer.
            </remarks>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxBigInt" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.Equals(SphinxConnector.NativeApi.SphinxBigInt)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.
            </param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a negative sign if 
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.op_Equality(SphinxConnector.NativeApi.SphinxBigInt,SphinxConnector.NativeApi.SphinxBigInt)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.op_Inequality(SphinxConnector.NativeApi.SphinxBigInt,SphinxConnector.NativeApi.SphinxBigInt)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.op_GreaterThan(SphinxConnector.NativeApi.SphinxBigInt,SphinxConnector.NativeApi.SphinxBigInt)">
      <summary>
            Implements the operator &gt;.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.op_LessThan(SphinxConnector.NativeApi.SphinxBigInt,SphinxConnector.NativeApi.SphinxBigInt)">
      <summary>
            Implements the operator &lt;.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.op_GreaterThanOrEqual(SphinxConnector.NativeApi.SphinxBigInt,SphinxConnector.NativeApi.SphinxBigInt)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.op_LessThanOrEqual(SphinxConnector.NativeApi.SphinxBigInt,SphinxConnector.NativeApi.SphinxBigInt)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.op_Implicit(System.Int64)~SphinxConnector.NativeApi.SphinxBigInt">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int64" /> to <see cref="T:SphinxConnector.NativeApi.SphinxBigInt" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBigInt.op_Implicit(SphinxConnector.NativeApi.SphinxBigInt)~System.Int64">
      <summary>
            Performs an implicit conversion from <see cref="T:SphinxConnector.NativeApi.SphinxBigInt" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="sphinxBigInt">The sphinx big int.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxBigInt.Value">
      <summary>
            Gets the value of the current instance.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxBigInt.SupportedSince">
      <summary>
            Gets the version since when this type is supported by Sphinx.
            </summary>
      <value>The version.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxBigInt.SphinxAttributeType">
      <summary>
            Gets the type of the sphinx attribute this instance represents.
            </summary>
      <value>The type of the sphinx attribute.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxBoolean">
      <summary>
            Represents the Sphinx type bool.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxBoolean" /> struct.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.Equals(SphinxConnector.NativeApi.SphinxBoolean)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.
                            </param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to. 
                            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.op_Equality(SphinxConnector.NativeApi.SphinxBoolean,SphinxConnector.NativeApi.SphinxBoolean)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.op_Inequality(SphinxConnector.NativeApi.SphinxBoolean,SphinxConnector.NativeApi.SphinxBoolean)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.op_Implicit(System.Boolean)~SphinxConnector.NativeApi.SphinxBoolean">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:SphinxConnector.NativeApi.SphinxBoolean" />.
            </summary>
      <param name="value">if set to <c>true</c> [value].</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.op_Implicit(SphinxConnector.NativeApi.SphinxBoolean)~System.Boolean">
      <summary>
            Performs an implicit conversion from <see cref="T:SphinxConnector.NativeApi.SphinxBoolean" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="sphinxBoolean">The sphinx boolean.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.op_Implicit(SphinxConnector.NativeApi.SphinxBoolean)~System.Int32">
      <summary>
            Performs an implicit conversion from <see cref="T:SphinxConnector.NativeApi.SphinxBoolean" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="sphinxBoolean">The sphinx boolean.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxBoolean.ToString">
      <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
      <returns>
        <see cref="F:System.Boolean.TrueString" /> if the value of this instance is true, or <see cref="F:System.Boolean.FalseString" /> if 
            the value of this instance is false.
            </returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxBoolean.Value">
      <summary>
            Gets the value of the current instance.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxBoolean.SupportedSince">
      <summary>
            Gets the version since when this type is supported by Sphinx.
            </summary>
      <value>The version.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxBoolean.SphinxAttributeType">
      <summary>
            Gets the type of the sphinx attribute this instance represents.
            </summary>
      <value>The type of the sphinx attribute.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxBuildKeywordResult">
      <summary>
            Represents the result of the BuildKeywords() method.
            </summary>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.BuildKeywords(System.String,System.String,System.Boolean)" />
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxBuildKeywordResult.Normalized">
      <summary>
            Gets the normalized keyword. 
            </summary>
      <value>The normalized keyword.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxBuildKeywordResult.Tokenized">
      <summary>
            Gets the tokenized keyword.
            </summary>
      <value>tokenized keyword.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxBuildKeywordResult.DocumentCount">
      <summary>
            Gets the number of documents containing the keyword.
            </summary>
      <value>The number of documents containing the keyword.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxBuildKeywordResult.HitCount">
      <summary>
            Gets the number of hits across the documents for the keyword.
            </summary>
      <value>The number of hits.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxClient">
      <summary>
            Provides methods to access the functions offered by Sphinx using the native Sphinx protocol.
            This class cannot be inherited.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxClient" /> class.
            </summary>
      <param name="host">The host on which searchd is running.</param>
      <param name="port">The port on which searchd is listening.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> or is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is not between 0 and 65535.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxClient" /> class.
            </summary>
      <param name="endpoint">The end point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoint" /> is null.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.BuildExcerpts(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
      <summary>
             Builds excerpts for the given documents using the settings from the given index name and
             inserting the default values for <see cref="P:SphinxConnector.NativeApi.BuildExcerptsOptions.BeforeMatch" /> and
             <see cref="P:SphinxConnector.NativeApi.BuildExcerptsOptions.AfterMatch" /> before and after the given highlight
             words.
             </summary>
      <param name="documents">The documents to build excerpts for.</param>
      <param name="indexName">The name of the index to use settings from.</param>
      <param name="highlightWords">The words to highlight.</param>
      <returns>An IList&lt;string&gt; containing the excerpts.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="documents" /> does not contain any elements or <paramref name="indexName" /> is empty. 
             </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="documents" /> or <paramref name="indexName" /> is null.
             </exception>
      <exception cref="T:SphinxConnector.NativeApi.SphinxClientException">
                 An error occured while executing the request. See exception message and inner exception
                 for details.
             </exception>
      <example>
        <code>
                SphinxClient sphinxClient = new SphinxClient(); 
            
                List&lt;string&gt; documents = new List&lt;string&gt;();
                documents.Add("This is my first document.");
                documents.Add("This is my second document.");
            
                IList&lt;string&gt; result = sphinxClient.BuildExcerpts(documents, "sakila", "is");
            
                foreach (string entry in result)
                {
                    Console.WriteLine(entry);
                }
             
             // This produces the following output:
             //
             // This <b>is</b> my first document.
             // This <b>is</b> my second document.
             </code>
      </example>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#api-func-buildexcerpts" />
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.BuildExcerpts(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,SphinxConnector.NativeApi.BuildExcerptsOptions)">
      <summary>
            Builds excerpts for the given documents using the settings from the given index name and
            the given options.
            </summary>
      <param name="documents">The documents to build excerpts for.</param>
      <param name="indexName">The name of the index to use settings from.</param>
      <param name="highlightWords">The highlightWords to highlight.</param>
      <param name="options">The options to use when building excerpts.</param>
      <returns>A list of strings with the excerpts.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="documents" /> does not contain any elements or <paramref name="indexName" /> is empty. 
            </exception>
      <exception cref="T:System.ArgumentNullException">
                One of <paramref name="documents" />, <paramref name="indexName" /> or <paramref name="options" /> is null.
            </exception>
      <exception cref="T:SphinxConnector.NativeApi.SphinxClientException">
                An error occured while executing the request. See exception message and inner exception
                for details.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.BuildKeywords(System.String,System.String,System.Boolean)">
      <summary>
            Builds a list of keywords from the given query, using the settings from the specified index.
            </summary>
      <param name="query">The query.</param>
      <param name="index">The index to use settings from.</param>
      <param name="includeStatistics">if set to <c>true</c> includes statistics in the result.</param>
      <returns>A list of <see cref="T:SphinxConnector.NativeApi.SphinxBuildKeywordResult" /> instances.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> or <paramref name="index" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="query" /> or <paramref name="index" /> is empty.
            </exception>
      <exception cref="T:SphinxConnector.NativeApi.SphinxClientException">
                An error occured while executing the request. See exception message and inner exception
                for details.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.GetStatus">
      <summary>
             Gets an array of <see cref="T:SphinxConnector.NativeApi.SphinxStatusInfo" /> instances for each
             status variable from searchd.
             </summary>
      <returns>A <see cref="T:SphinxConnector.NativeApi.Collections.SphinxStatusInfoCollection" /> containing instances of <see cref="T:SphinxConnector.NativeApi.SphinxStatusInfo" /> for each
             status variable.</returns>
      <exception cref="T:SphinxConnector.NativeApi.SphinxClientException">
                 An error occured while executing the request. See exception message and inner exception
                 for details.
             </exception>
      <example>
        <code>
             SphinxClient sphinxClient = new SphinxClient();
             SphinxStatusInfo[] statusInfos = sphinxClient.GetStatus();
            
             foreach (SphinxStatusInfo sphinxStatusInfo in statusInfos)
             {
                 Console.WriteLine(sphinxStatusInfo);
             }
             
             /*
             This code produces the following output (your values may vary):
             
             uptime 226
             connections 2
             maxed_out 0
             command_search 0
             command_excerpt 0
             command_update 0
             command_keywords 0
             command_persist 0
             command_status 2
             agent_connect 0
             agent_retry 0
             queries 0
             dist_queries 0
             query_wall 0.000
             query_cpu OFF
             dist_wall 0.000
             dist_local 0.000
             dist_wait 0.000
             query_reads OFF
             query_readkb OFF
             query_readtime OFF
             avg_query_wall 0.000
             avg_query_cpu OFF
             avg_dist_wall 0.000
             avg_dist_local 0.000
             avg_dist_wait 0.000
             avg_query_reads OFF
             avg_query_readkb OFF
             avg_query_readtime OFF
             */
             </code>
      </example>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.UpdateAttributes``1(System.String,SphinxConnector.NativeApi.SphinxAttributeUpdate{``0}[])">
      <summary>
            Updates attributes for the index with the given name with values from the given
            sequence of SphinxAttributeUpdateItems.
            </summary>
      <typeparam name="TUpdateable">The type of the attribute to update.</typeparam>
      <param name="index">The name of the index to update attributes for.</param>
      <param name="sphinxAttributeUpdates">The sphinx attribute update items.</param>
      <returns>The number of updated documents. Maybe 0.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> or <paramref name="sphinxAttributeUpdates" /> is empty.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> or <paramref name="sphinxAttributeUpdates" /> is null.
            </exception>
      <exception cref="T:SphinxConnector.NativeApi.SphinxClientException">
                An error occured while executing the request. See exception message and inner exception
                for details.
            </exception>
      <remarks>
            The unlicensed version only updates one document per attribute. 
            </remarks>
      <example>
        <code>
            SphinxAttributeUpdate&lt;SphinxInteger&gt; realeaseYearAttributeUpdate = new SphinxAttributeUpdate&lt;SphinxInteger&gt;("release_year");
            realeaseYearAttributeUpdate.AddUpdateValue(87, 1999);
             
            int updateCount = sphinxClient.UpdateAttributes("sakila", realeaseYearAttributeUpdate);
            
            Console.WriteLine("{0} documents(s) updated", updateCount);
             </code>
      </example>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.UpdateAttributes``1(System.String,SphinxConnector.NativeApi.UpdateAttributesOptions,SphinxConnector.NativeApi.SphinxAttributeUpdate{``0}[])">
      <summary>
            Updates attributes for the index with the given name with values from the given
            sequence of SphinxAttributeUpdateItems.
            </summary>
      <typeparam name="TUpdateable">The type of the attribute to update.</typeparam>
      <param name="index">The name of the index to update attributes for.</param>
      <param name="options">Options for updating attributes.</param>
      <param name="sphinxAttributeUpdates">The sphinx attribute update items.</param>
      <returns>The number of updated documents. Maybe 0.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> or <paramref name="sphinxAttributeUpdates" /> is empty.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> or <paramref name="sphinxAttributeUpdates" /> is null.
            </exception>
      <exception cref="T:SphinxConnector.NativeApi.SphinxClientException">
                An error occured while executing the request. See exception message and inner exception
                for details.
            </exception>
      <remarks>
            The unlicensed version only updates one document per attribute. 
            </remarks>
      <example>
        <code>
            SphinxAttributeUpdate&lt;SphinxInteger&gt; realeaseYearAttributeUpdate = new SphinxAttributeUpdate&lt;SphinxInteger&gt;("release_year");
            realeaseYearAttributeUpdate.AddUpdateValue(87, 1999);
             
            int updateCount = sphinxClient.UpdateAttributes("sakila", UpdateAttributesOptions.IgnoreNonExistentColumns, realeaseYearAttributeUpdate);
            
            Console.WriteLine("{0} documents(s) updated", updateCount);
             </code>
      </example>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.FlushAttributes">
      <summary>
            Causes Sphinx to do an attribute flush.
            </summary>
      <returns>The internal flush tag.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:SphinxConnector.NativeApi.SphinxClient.Version" /> is less than 1.10.1
            </exception>
      <exception cref="T:SphinxConnector.NativeApi.SphinxClientException">
                An error occured while executing the request. See exception message and inner exception
                for details.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.Query(System.String,System.String,System.String)">
      <summary>
            Sends the specified query to searchd returns its result. If no index name is given, the query will be executed
            against all indexes. If a comment is provided it will be written to the query log by searchd.
            </summary>
      <param name="query">The query to execute.</param>
      <param name="indexName">The name of the index(es) to query. Use "*" for all indexes.</param>
      <param name="comment">A comment for this query, which will be written to the sphinx query log.</param>
      <returns>An instance of the <see cref="T:SphinxConnector.NativeApi.SphinxSearchResult" /> class with the query result.</returns>
      <example>
        <code>
                SphinxClient sphinxClient = new SphinxClient(); //Use SphinxClient with the default options.
                SphinxSearchResult result = sphinxClient.Query("query", "myindex", "comment");
            
                foreach (SphinxMatch match in result.Matches)
                {
                    Console.WriteLine("DocumentId {0} Weight {1}", match.DocumentId, match.Weight);
                }
            </code>
            To query multiple indexes, pass a comma separated string with the index names as a parameter to
            the Query() method:
            <code>
                SphinxClient sphinxClient = new SphinxClient(); //Use SphinxClient with the default options.
                SphinxSearchResult result = sphinxClient.Query("query", "myindex, myOtherIndex");
            </code></example>
      <exception cref="T:System.ArgumentNullException">
                Parameter <paramref name="query" /> or <paramref name="indexName" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                Parameter <paramref name="query" /> or <paramref name="indexName" /> is empty.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                There are queries which have been added via <see cref="M:SphinxConnector.NativeApi.SphinxClient.AddQuery(System.String,System.String,System.String)" />, but have 
                not yet been executed. Use <see cref="M:SphinxConnector.NativeApi.SphinxClient.RunQueries" /> to execute these queries. <br />         
                -or- <br /><see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortMode" />
                has been set to a value other than <see cref="F:SphinxConnector.NativeApi.SphinxSortMode.Relevance" />, but 
                <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortBy" /> is empty.
                -or- <br /><see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortMode" /> has been set to <see cref="F:SphinxConnector.NativeApi.SphinxSortMode.Relevance" />, 
                but <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortBy" /> is not empty.
            </exception>
      <exception cref="T:SphinxConnector.NativeApi.SphinxClientException">
                An error occured while executing the query. See exception message and inner exception
                for details.
            </exception>
      <remarks>
            Note that the index name is case-sensitive!
            </remarks>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.AddQuery(System.String,System.String,System.String)">
      <summary>
            Adds a new query with the current <see cref="P:SphinxConnector.NativeApi.SphinxClient.SearchOptions" /> to the search request. 
            If no index name is given, the query will be executed  against all indexes. If a comment is 
            provided it will be written to the query log by searchd.
            </summary>
      <param name="query">The query to add.</param>
      <param name="indexName">The name of the index to search in.</param>
      <param name="comment">A comment for this query, which will be written to the sphinx query log.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="indexName" /> or <paramref name="query" /> is empty.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> or <paramref name="indexName" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortMode" /> has been set to a value other 
                than <see cref="F:SphinxConnector.NativeApi.SphinxSortMode.Relevance" />, but <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortBy" /> is empty.
                <b>or</b><see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortMode" /> has been set to <see cref="F:SphinxConnector.NativeApi.SphinxSortMode.Relevance" />, 
                but <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortBy" /> is not empty.
            </exception>
      <remarks>
            Note that the index name is case-sensitive!
            <br />
            After succesful execution, the query is removed from the (internal) list of scheduled queries. In case of an exception, the
            query is only removed if the exception was not thrown due to a network problem. In case of a network problem,
            you can call <see cref="M:SphinxConnector.NativeApi.SphinxClient.RunQueries" /> to execute the query again or call <see cref="M:SphinxConnector.NativeApi.SphinxClient.ClearQueries" /> to remove all
            queries from the list scheduled queries.
            </remarks>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.RunQueries">
      <summary>
            Runs the queries which have been added via the AddQuery method.
            </summary>
      <returns>An instance of <see cref="T:SphinxConnector.NativeApi.Collections.SphinxSearchResultCollection" /> containing the search results.</returns>
      <remarks>
        <exception cref="T:System.InvalidOperationException">
                No queries have been added to this instance.
            </exception>
        <exception cref="T:SphinxConnector.NativeApi.SphinxClientException">
                An error occured while executing the queries. See exception message and inner exception
                for details.
            </exception>
            After succesful execution, the queries are removed from the (internal) list of scheduled queries. In case of an exception, the
            queries are only removed if the exception was not thrown due to a network problem. In case of a network problem,
            you can call <see cref="M:SphinxConnector.NativeApi.SphinxClient.RunQueries" /> again to execute the queries.
            </remarks>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.AddQuery(System.String,System.String,System.String)" />
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.OpenPersistentConnection">
      <summary>
             Opens a persistent connection to searchd.
             </summary>
      <exception cref="T:SphinxConnector.NativeApi.SphinxClientException">
                 An error occured while opening the connection. See exception message and inner exception
                 for details.
             </exception>
      <example>
        <code>
             using (SphinxClient sphinxClient = new SphinxClient())
             {
                 sphinxClient.OpenPersistentConnection();
            
                 sphinxClient.Query("myQuery", "myIndex");
                 sphinxClient.Query("myOtherQuery", "myIndex");
             }
             </code>
             The example above uses the <b>using</b> keyword to close the connection after the queries are executed. 
             Alternatively you can call <see cref="M:SphinxConnector.NativeApi.SphinxClient.ClosePersistentConnection" /> or 
             <see cref="M:SphinxConnector.NativeApi.SphinxClient.Dispose" /> yourself.
             Note that the SphinxClient object is still usable after calling Dispose(). It will just open 
             a new (non persistent) connection if another call is made.
             </example>
      <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.ClosePersistentConnection" />
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.ClosePersistentConnection">
      <summary>
            Closes a persistent connection.
            </summary>
      <exception cref="T:System.InvalidOperationException">
                No persistent connection has been opened.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.ResetSearchOptions">
      <summary>
            Resets the search options to their default values and clears field weights,
            index weights etc.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.ClearQueries">
      <summary>
            Clears the (internal) list of scheduled queries (queries which have been added via <see cref="M:SphinxConnector.NativeApi.SphinxClient.AddQuery(System.String,System.String,System.String)" />).
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClient.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxClient.Port">
      <summary>
            Gets or sets the port on which searchd is listening. Default is 9312.
            </summary>
      <value>The port.</value>
      <remarks>
            If all of <see cref="P:SphinxConnector.NativeApi.SphinxClient.IPEndpoint" /> or <see cref="P:SphinxConnector.NativeApi.SphinxClient.Host" /> and <see cref="P:SphinxConnector.NativeApi.SphinxClient.Port" /> are set,
            the <see cref="P:SphinxConnector.NativeApi.SphinxClient.IPEndpoint" /> will be used.
            </remarks>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxClient.Host">
      <summary>
            Gets or sets the host on which searchd is running. Default is 127.0.0.1.
            </summary>
      <value>The host.</value>
      <remarks>
            If all of <see cref="P:SphinxConnector.NativeApi.SphinxClient.IPEndpoint" /> or <see cref="P:SphinxConnector.NativeApi.SphinxClient.Host" /> and <see cref="P:SphinxConnector.NativeApi.SphinxClient.Port" /> are set,
            the <see cref="P:SphinxConnector.NativeApi.SphinxClient.IPEndpoint" /> will be used.
            </remarks>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxClient.IPEndpoint">
      <summary>
            Gets or sets the ip end point of searchd. Alternatively <see cref="P:SphinxConnector.NativeApi.SphinxClient.Host" /> and
            <see cref="P:SphinxConnector.NativeApi.SphinxClient.Port" /> properties can be used.
            </summary>
      <value>The IP endpoint.</value>
      <remarks>
            If all of <see cref="P:SphinxConnector.NativeApi.SphinxClient.IPEndpoint" /> or <see cref="P:SphinxConnector.NativeApi.SphinxClient.Host" /> and <see cref="P:SphinxConnector.NativeApi.SphinxClient.Port" /> are set,
            the <see cref="P:SphinxConnector.NativeApi.SphinxClient.IPEndpoint" /> will be used.
            </remarks>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxClient.SearchOptions">
      <summary>
            Gets or sets the search options which are applied when a query is sent to searchd.
            </summary>
      <value>The search options.</value>
      <exception cref="T:System.ArgumentException">
        <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.Version" /> does not match <see cref="P:SphinxConnector.NativeApi.SphinxClient.Version" />.
            </exception>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxClient.Version">
      <summary>
            Gets or sets the version of Sphinx which this instance will
            connect to. Default is 2.0.5.
            </summary>
      <value>The version of Sphinx you want to connect to.</value>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 2.0.1.
            </exception>
      <example>
            FIXME:
            To change the version, create an instance of the <see cref="T:System.Version" /> class
            with the appropriate version number and assign it to the version property. The 
            following example shows how to change the version to 2.0.1.
            <code>
            SphinxClient sphinxClient = new SphinxClient();
            sphinxClient.Version = SphinxVersion.V201.
            </code></example>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxClient.ConnectTimeout">
      <summary>
            Gets or sets the connect timeout. Default is 30 seconds.
            </summary>
      <value>The connect timeout.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxClient.Encoding">
      <summary>
            Gets or sets the encoding which is used when sending strings to searchd. Default is
            <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
      <remarks>This is useful for indexes which are configured to use <b>sbcs</b> as character encoding.
            For indexes which use UTF8, it is not necessary to change the default value.
            </remarks>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxClient.IsConnected">
      <summary>
            Gets a value indicating whether the current instance is connected to Sphinx.
            </summary>
      <remarks>
            This property checks whether a connection to Sphinx has been opened 
            and checks the <see cref="P:System.Net.Sockets.Socket.Connected" /> property of the socket of the connection.
            </remarks>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxClientException">
      <summary>
            The exception that is thrown when an error occurs.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClientException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxClientException" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClientException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxClientException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClientException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxClientException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxClientException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxClientException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).
            </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxClientException.ShouldRetry">
      <summary>
            Gets or sets a value indicating whether the client should retry later.
            </summary>
      <value>
        <c>true</c> if client should retry; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxConversionException">
      <summary>
            Thrown in case a conversion from a .NET type to a Sphinx type fails.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxConversionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxConversionException" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxConversionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxConversionException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxConversionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxConversionException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxConversionException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxFloat">
      <summary>
            Represents the Sphinx type float.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxFloat" /> struct.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.Equals(SphinxConnector.NativeApi.SphinxFloat)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.
                            </param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to. 
                            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance.
            </returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.op_Equality(SphinxConnector.NativeApi.SphinxFloat,SphinxConnector.NativeApi.SphinxFloat)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.op_Inequality(SphinxConnector.NativeApi.SphinxFloat,SphinxConnector.NativeApi.SphinxFloat)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.op_GreaterThan(SphinxConnector.NativeApi.SphinxFloat,SphinxConnector.NativeApi.SphinxFloat)">
      <summary>
            Implements the operator &gt;.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.op_LessThan(SphinxConnector.NativeApi.SphinxFloat,SphinxConnector.NativeApi.SphinxFloat)">
      <summary>
            Implements the operator &lt;.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.op_LessThanOrEqual(SphinxConnector.NativeApi.SphinxFloat,SphinxConnector.NativeApi.SphinxFloat)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.op_GreaterThanOrEqual(SphinxConnector.NativeApi.SphinxFloat,SphinxConnector.NativeApi.SphinxFloat)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.op_Implicit(System.Single)~SphinxConnector.NativeApi.SphinxFloat">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:SphinxConnector.NativeApi.SphinxFloat" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.op_Implicit(SphinxConnector.NativeApi.SphinxFloat)~System.Single">
      <summary>
            Performs an implicit conversion from <see cref="T:SphinxConnector.NativeApi.SphinxFloat" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="sphinxFloat">The sphinx float.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxFloat.op_Implicit(SphinxConnector.NativeApi.SphinxFloat)~System.Double">
      <summary>
            Performs an implicit conversion from <see cref="T:SphinxConnector.NativeApi.SphinxFloat" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="sphinxFloat">The sphinx float.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxFloat.Value">
      <summary>
            Gets the value of the current instance.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxFloat.SupportedSince">
      <summary>
            Gets the version since when this type is supported by Sphinx.
            </summary>
      <value>The version.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxFloat.SphinxAttributeType">
      <summary>
            Gets the type of the sphinx attribute this instance represents.
            </summary>
      <value>The type of the sphinx attribute.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxGroupByFunction">
      <summary>
            Determines how the group by value is calculated.
            </summary>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#clustering" />
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxGroupByFunction.Day">
      <summary>
            Extracts year, month and day in YYYYMMDD format from timestamp. This is the default.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxGroupByFunction.Week">
      <summary>
            Extracts year and first day of the week number (counting from year start) in YYYYNNN format from timestamp;
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxGroupByFunction.Month">
      <summary>
            Extracts month in YYYYMM format from timestamp
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxGroupByFunction.Year">
      <summary>
            Extracts year in YYYY format from timestamp
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxGroupByFunction.Attribute">
      <summary>
            Uses attribute value itself for grouping.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxGroupByFunction.AttributePair">
      <summary>
      </summary>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxInteger">
      <summary>
            Represents the Sphinx type uint.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxInteger" /> struct.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxInteger" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.Equals(SphinxConnector.NativeApi.SphinxInteger)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.
            </returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_Equality(SphinxConnector.NativeApi.SphinxInteger,SphinxConnector.NativeApi.SphinxInteger)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_Inequality(SphinxConnector.NativeApi.SphinxInteger,SphinxConnector.NativeApi.SphinxInteger)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_Explicit(System.Int64)~SphinxConnector.NativeApi.SphinxInteger">
      <summary>
            Performs an explicit conversion from <see cref="T:System.Int64" /> to <see cref="T:SphinxConnector.NativeApi.SphinxInteger" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_GreaterThan(SphinxConnector.NativeApi.SphinxInteger,SphinxConnector.NativeApi.SphinxInteger)">
      <summary>
            Implements the operator &gt;.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_LessThan(SphinxConnector.NativeApi.SphinxInteger,SphinxConnector.NativeApi.SphinxInteger)">
      <summary>
            Implements the operator &lt;.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_GreaterThanOrEqual(SphinxConnector.NativeApi.SphinxInteger,SphinxConnector.NativeApi.SphinxInteger)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_LessThanOrEqual(SphinxConnector.NativeApi.SphinxInteger,SphinxConnector.NativeApi.SphinxInteger)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_Implicit(System.UInt32)~SphinxConnector.NativeApi.SphinxInteger">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:SphinxConnector.NativeApi.SphinxInteger" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_Implicit(System.Int32)~SphinxConnector.NativeApi.SphinxInteger">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:SphinxConnector.NativeApi.SphinxInteger" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:SphinxConnector.NativeApi.SphinxConversionException">
        <see cref="F:SphinxConnector.NativeApi.SphinxInteger.value" /> is negative.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_Implicit(SphinxConnector.NativeApi.SphinxInteger)~System.UInt32">
      <summary>
            Performs an implicit conversion from <see cref="T:SphinxConnector.NativeApi.SphinxInteger" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="sphinxInteger">The sphinx integer.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxInteger.op_Implicit(SphinxConnector.NativeApi.SphinxInteger)~System.Int64">
      <summary>
            Performs an implicit conversion from <see cref="T:SphinxConnector.NativeApi.SphinxInteger" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="sphinxInteger">The sphinx integer.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxInteger.Value">
      <summary>
            Gets the value of the current instance.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxInteger.SupportedSince">
      <summary>
            Gets the version since when this type is supported by Sphinx.
            </summary>
      <value>The version.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxInteger.SphinxAttributeType">
      <summary>
            Gets the type of the sphinx attribute this instance represents.
            </summary>
      <value>The type of the sphinx attribute.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxMatch">
      <summary>
            Provides information about a matched document.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxMatch.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxMatch.DocumentId">
      <summary>
            Gets the id of the matched document.
            </summary>
      <value>The document Id.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxMatch.Weight">
      <summary>
            Gets the weight of the document.
            </summary>
      <value>The weight.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxMatch.Attributes">
      <summary>
            Gets a collection containing the attributes of the matched document. 
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxMatchMode">
      <summary>
            Determines the mode searchd uses to match a document.
            </summary>
      <remarks>
            For more information on how the different matching modes work see
            http://www.sphinxsearch.com/docs/current.html#matching-modes
            </remarks>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxMatchMode.All">
      <summary>
            Match all query words. This is the default.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxMatchMode.Any">
      <summary>
            Match any of the query words.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxMatchMode.Phrase">
      <summary>
            Match query as a phrase, requiring perfect match.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxMatchMode.Boolean">
      <summary>
            Match query as a boolean expression. For more information see http://www.sphinxsearch.com/docs/current.html#boolean-syntax.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxMatchMode.Extended">
      <summary>
      </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxMatchMode.Fullscan">
      <summary>
            Match query using the full scan mode.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxMatchMode.Extended2">
      <summary>
            Match query using the second version of the Extended matching mode.
            </summary>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxOrdinal">
      <summary>
            Represents the Sphinx type str2ordinal.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxOrdinal.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxOrdinal" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxOrdinal.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxOrdinal.Equals(SphinxConnector.NativeApi.SphinxOrdinal)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.
                            </param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxOrdinal.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.
                            </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxOrdinal.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxOrdinal.op_Equality(SphinxConnector.NativeApi.SphinxOrdinal,SphinxConnector.NativeApi.SphinxOrdinal)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxOrdinal.op_Inequality(SphinxConnector.NativeApi.SphinxOrdinal,SphinxConnector.NativeApi.SphinxOrdinal)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxOrdinal.op_Implicit(System.Int32)~SphinxConnector.NativeApi.SphinxOrdinal">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:SphinxConnector.NativeApi.SphinxOrdinal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxOrdinal.op_Implicit(SphinxConnector.NativeApi.SphinxOrdinal)~System.Int32">
      <summary>
            Performs an implicit conversion from <see cref="T:SphinxConnector.NativeApi.SphinxOrdinal" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="sphinxOrdinal">The sphinx ordinal.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxOrdinal.Value">
      <summary>
            Gets the value of this instance.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxOrdinal.SupportedSince">
      <summary>
            Gets the version since when this type is supported by Sphinx.
            </summary>
      <value>The version.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxOrdinal.SphinxAttributeType">
      <summary>
            Gets the type of the sphinx attribute this instance represents.
            </summary>
      <value>The type of the sphinx attribute.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxSearchOptions">
      <summary>
            Provides methods and properties to configure e.g. how searchd matches and sorts results,
            set filters on attributes etc.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.#ctor(System.Version)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxSearchOptions" /> class.
            </summary>
      <param name="version">The version.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetDocumentIdRange(System.Int32,System.Int32)">
      <summary>
            Sets the mininum and maximum ids for a document to be matched.
            </summary>
      <param name="minDocumentId">The mininum id for a document to be matched.</param>
      <param name="maxDocumentId">The maximum Id for a document to be matched.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="minDocumentId" /> is greater than the maximum document id.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetFilter``1(System.String,``0[])">
      <summary>
             Sets a filter for the attribute with the given name.
             </summary>
      <typeparam name="TFilterable">The type to set a filter for.</typeparam>
      <param name="attributeName">The name of the attribute to filter on.</param>
      <param name="value">The value for the filter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> or <paramref name="value" /> is null.
             </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeName" /> is empty.
             </exception>
      <example>
             The following example shows how to filter films based on the actor_id attribute.
             The filter will match any films with actor_id equal to 35 OR 28.
             <code>
             SphinxClient sphinxClient = new SphinxClient();
             sphinxClient.SearchOptions.SetFilter&lt;SphinxInteger&gt;("actor_id", 35, 28);
            
             SphinxSearchResult searchResult = sphinxClient.Query("room", "sakila");
             
             foreach (SphinxMatch sphinxMatch in searchResult.Matches)
             {
                 Console.WriteLine(sphinxMatch);
             }
             </code>
             If you wanted to retrieve all films with actor_id equal to 35 AND 28, you would call the SetFilter
             method like this:
             <code>
             sphinxClient.SearchOptions.SetFilter&lt;SphinxInteger&gt;("actor_id", 35);
             sphinxClient.SearchOptions.SetFilter&lt;SphinxInteger&gt;("actor_id", 28);
             </code></example>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetFilter``1(System.String,``0,System.Boolean)">
      <summary>
            Sets a filter for the attribute with the given name.
            </summary>
      <typeparam name="TFilterable">The type to set a filter for.</typeparam>
      <param name="attributeName">The name of the attribute to filter on.</param>
      <param name="value">The value for the filter.</param>
      <param name="exclude">if set to <c>true</c> excludes the matching documents from the result.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> or <paramref name="value" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeName" /> is empty.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetFilter``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>
            Sets a filter for the attribute with the given name.
            </summary>
      <typeparam name="TFilterable">The type to set a filter for.</typeparam>
      <param name="attributeName">The name of the attribute to filter on.</param>
      <param name="values">The value for the filter.</param>
      <param name="exclude">if set to <c>true</c> excludes the matching documents from the result.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> or <paramref name="values" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeName" /> is empty or <paramref name="values" /> contains more than one value for a string filter.
            </exception>
      <exception cref="T:System.NotSupportedException">
                Attributes of type <typeparamref name="TFilterable" /> are not supported in <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.Version" />.
            </exception>
      <remarks>
            Please note that JSON string filters can currently only contain one value.
            </remarks>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetFilterRange``1(System.String,``0,``0,System.Boolean)">
      <summary>
             Sets a range filter for the attribute with the given attribute name.
             </summary>
      <typeparam name="TRangeFilterable">The type to filter on.</typeparam>
      <param name="attributeName">The name of the attribute to filter on.</param>
      <param name="min">The mininum value for the attribute.</param>
      <param name="max">The maximum value for the attribute.</param>
      <param name="exclude">if set to <c>true</c> excludes the matching documents from the result.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeName" /> is empty or <paramref name="min" /> is not less or equal to <paramref name="max" />.
             </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> is null.
             </exception>
      <exception cref="T:System.NotSupportedException">
                 Either attributes of type <typeparamref name="TRangeFilterable" /> are not supported in <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.Version" />
                 or the type can not have a range filter applied.
             </exception>
      <example>
        <code>
             SphinxClient sphinxClient = new SphinxClient();
             sphinxClient.SearchOptions.SetFilterRange&lt;SphinxFloat&gt;("rental_rate", 0, 0.99f);
            
             SphinxSearchResult searchResult = sphinxClient.Query("room", "sakila");
             
             foreach (SphinxMatch sphinxMatch in searchResult.Matches)
             {
                 Console.WriteLine(sphinxMatch);
             }
             </code>
      </example>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.ResetFilters">
      <summary>
            Resets all filters which were added via one of the SetFilter() or SetFilterRange() methods 
            and <see cref="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetGeoAnchor(System.String,System.String,System.Single,System.Single)" />.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.ResetOuterSelect">
      <summary>
            Resets the outer select.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.ResetOverrides">
      <summary>
            Resets all overrides.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetGeoAnchor(System.String,System.String,System.Single,System.Single)">
      <summary>
            Sets an anchor point for geosphere distance calculations.
            </summary>
      <param name="latitudeAttribute">The name of the lattitude attribute in the index.</param>
      <param name="longitudeAttribute">The name of the longitude attribute in the index.</param>
      <param name="latitude">The latitude of the anchor point in radians.</param>
      <param name="longitude">The longitude of the anchor point in radians.</param>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#api-func-setgeoanchor" />
      <seealso cref="M:SphinxConnector.Common.SphinxHelper.RadiansToDegress(System.Single)" />
      <seealso cref="M:SphinxConnector.Common.SphinxHelper.DegreesToRadians(System.Single)" />
      <example>
            The following example shows how to filter search results based on a geo distance calculation.
            
            <code>
            float latitude = 0.678892874f;
            float longitue = -1.34454090f;
            
            SphinxClient sphinxClient = new SphinxClient();
            sphinxClient.SearchOptions.SetGeoAnchor("latitude", "longitude", latitude, longitude);
            
            //Return all results within 20 km of the anchor point
            sphinxClient.SearchOptions.SetFilterRange&lt;SphinxFloat&gt;("@geodist", 0, 20000);  
            </code></example>
      <remarks>
            Sphinx expects latitude and longitude to be in radians (the attributes in the index <b>and</b> the parameters to SetGeoAnchor).
            The <see cref="T:SphinxConnector.Common.SphinxHelper" /> class contains methods to convert from degrees to radians and vice versa.
            
            The unit of @geodist is meters.
            </remarks>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetFieldWeight(System.String,System.Int32)">
      <summary>
            Sets a weight for the field with the given name. If a weight for the field has previously
            been set, it will be overwritten.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="weight">The weight to assign to the field.</param>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#api-func-setfieldweights" />
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetIndexWeight(System.String,System.Int32)">
      <summary>
            Sets a weight for the index with the given name. The method should be called for each
            index that should have a weight set. If a weight for an index has previously been set, 
            it will be overwritten.
            </summary>
      <param name="indexName">Name of the index.</param>
      <param name="weight">The weight to assign to the index.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="indexName" /> is empty.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indexName" /> is null.
            </exception>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#api-func-setindexweights" />
      <example>
            //Assign a weight of 100 to index_1 and a weight of 200 to index_2
            
            SphinxClient sphinxClient  = new SphinxClient();
            sphinxClient.SearchOptions.SetIndexWeight("index_1", 100);
            sphinxClient.SearchOptions.SetIndexWeight("index_2", 200);
            </example>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetOverride``1(SphinxConnector.NativeApi.SphinxAttributeOverride{``0})">
      <summary>
             Sets the override values for an attribute. If values for the attribute have previously
             been set, they will be overwritten.
             </summary>
      <typeparam name="TOverridable">The type of the attribute for which override values are set.</typeparam>
      <param name="attributeOverride">The values dictionary.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeOverride" /> does not contain any elements.
             </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeOverride" /> is null.
             </exception>
      <example>
             This example is based on the <b>Sakila</b> sample index from the introduction.
             The attributes include a field 'recommended_by_friends' which is set to false as default.
             We will use the SetOverrides() method to dynamically overwrite this value for a query.
             We then use this attribute in a sort by expression, so that films which have been recommended by friends of
             the user doing the search, will appear at the top of the list.
             <code>
             SphinxAttributeOverride&lt;SphinxBoolean&gt; attributeOverride = new SphinxAttributeOverride&lt;SphinxBoolean&gt;("recommended_by_friends");
             attributeOverride.AddOverrideValue(743, true); //Normally this value would be retrieved from somewhere else
             
             SphinxClient sphinxClient = new SphinxClient();
             sphinxClient.SearchOptions.SetOverride(attributeOverride);
             sphinxClient.SearchOptions.SortMode = SphinxSortMode.Expression;
             sphinxClient.SearchOptions.SortBy = "@weight + (recommended_by_friends * 1000)";
             
             SphinxSearchResult searchResult = sphinxClient.Query("room", "sakila");
            
             foreach (SphinxMatch sphinxMatch in searchResult.Matches)
             {
                 Console.WriteLine(sphinxMatch);
             }
             </code></example>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxSearchOptions.SetOuterSelect(System.String,System.Int32,System.Int32)">
      <summary>
            Sets the outer select. Supported with Sphinx 2.1.1 and up.
            </summary>
      <param name="orderBy">The attribute to order by.</param>
      <param name="offset">The offset.</param>
      <param name="limit">The limit.</param>
      <example>
        <code>
            SphinxClient sphinxClient = new SphinxClient();
            sphinxClient.SearchOptions.SetOuterSelect("attribute ASC", 0, 10);
            </code>
      </example>
      <exception cref="T:System.ArgumentNullException">Occurs if <paramref name="orderBy" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
            Occurs if <paramref name="orderBy" /> is empty <br />
            -or-<br />
            if <paramref name="offset" /> is less than zero <br />
            -or-<br />
            if <paramref name="limit" /> is less than or equal to zero
            </exception>
      <exception cref="T:System.InvalidOperationException">Occurs if <see cref="P:SphinxConnector.NativeApi.SphinxClient.Version" /> is less than 2.1.1.</exception>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.Cutoff">
      <summary>
            Gets or sets the cutoff, i.e. searchd will stop processing results after the
            specified number of matches have been processed. Default is 0, which means
            not to cut off results.
            </summary>
      <value>The cutoff.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.DistributedRetryCount">
      <summary>
            Gets or sets the distributed retry count.
            </summary>
      <value>The distributed retry count.</value>
      <seealso href="http://sphinxsearch.com/docs/current.html#api-func-setretries" />
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.DistributedRetryDelay">
      <summary>
            Gets or sets the distributed retry delay.
            </summary>
      <value>The distributed retry delay.</value>
      <seealso href="http://sphinxsearch.com/docs/current.html#api-func-setretries" />
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.GroupByFunction">
      <summary>
            Gets or sets the group by function. Default is <see cref="F:SphinxConnector.NativeApi.SphinxGroupByFunction.Day" />.
            </summary>
      <value>The group by function.</value>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#api-func-setgroupby" />
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.GroupBy">
      <summary>
            Gets or sets the attribute to group by.
            </summary>
      <value>The attribute to group by.</value>
      <example>
        <code>
            SphinxClient sphinxClient = new SphinxClient();
            sphinxClient.SearchOptions.GroupBy = "last_update";
            sphinxClient.SearchOptions.GroupByFunction = SphinxGroupByFunction.Day;
            
            SphinxSearchResult searchResult = sphinxClient.Query("room", "sakila");
            
            foreach (SphinxMatch match in searchResult.Matches)
            {
                Console.WriteLine("DocumentId {0} Weight {1}", match.DocumentId, match.Weight);
            }
            </code>
      </example>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#api-func-setgroupby" />
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.GroupDistinct">
      <summary>
            Gets or sets the group distinct attribute.
            </summary>
      <value>The group distinct.</value>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#api-func-setgroupdistinct" />
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.GroupSort">
      <summary>
            Gets or sets the group sort clause. Default is @group desc.
            </summary>
      <value>The group sort clause.</value>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#api-func-setgroupby" />
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.MaxMatches">
      <summary>
            Gets or sets the maximum number of documents that searchd will match. Default is 1000.
            </summary>
      <value>The maximum number of documents that searchd will match.</value>
      <remarks>
            Note that this does not specify how many results are actually returned from searchd.
            You need to adjust <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.Limit" /> for that.
            </remarks>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.MaxQueryTime">
      <summary>
            Gets or sets the maximum time for a query. This value is applied per index.
            Default is <see cref="F:System.TimeSpan.MaxValue" /> which means no limit.
            </summary>
      <value>The maximum time for a query.</value>
      <remarks>
            This value is handled as an integer by Sphinx. That means if you e.g.
            set the max query time to value shown below, the .5 part will be cut off.
            <code>
            SphinxClient sphinxClient = new SphinxClient();
            sphinxClient.SearchOptiions.MaxQueryTime = TimeSpan.FromMilliseconds(100.5)
            </code></remarks>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.Offset">
      <summary>
            Gets or sets the offset from which to return results from searchd.
            </summary>
      <value>The offset.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.Limit">
      <summary>
            Gets or sets a limit for the number of matches to return from searchd. Default is 20.
            </summary>
      <value>The limit.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.MatchMode">
      <summary>
            Gets or sets the match mode. Default is <see cref="F:SphinxConnector.NativeApi.SphinxMatchMode.All" />.
            </summary>
      <value>The match mode.</value>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#matching-modes" />
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.Select">
      <summary>
            Gets or sets the select clause. Default is "*";
            </summary>
      <value>The select clause.</value>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#api-func-setselect" />
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.RankMode">
      <summary>
            Gets or sets the rank mode. Default is <see cref="F:SphinxConnector.Common.SphinxRankMode.ProximityBM25" /></summary>
      <value>The rank mode.</value>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is set to a different value than <see cref="F:SphinxConnector.Common.SphinxRankMode.None" /> 
                although <see cref="T:SphinxConnector.NativeApi.SphinxMatchMode" /> is not set to <see cref="F:SphinxConnector.NativeApi.SphinxMatchMode.Extended" /> 
                or <see cref="F:SphinxConnector.NativeApi.SphinxMatchMode.Extended2" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The rank mode is not supported in the current <see cref="P:SphinxConnector.NativeApi.SphinxClient.Version" />.
            </exception>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.RankingExpression">
      <summary>
            Gets or sets the ranking expression to use with rank mode <see cref="F:SphinxConnector.Common.SphinxRankMode.Expression" />.
            </summary>
      <value>The ranking expression.</value>
      <seealso href="http://sphinxsearch.com/docs/current.html#weighting" />
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortMode">
      <summary>
            Gets or sets the sort mode. Default is <see cref="F:SphinxConnector.NativeApi.SphinxSortMode.Relevance" />.
            </summary>
      <value>The sort mode.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortBy">
      <summary>
            Gets or sets a sort-by expression. Only valid if <see cref="P:SphinxConnector.NativeApi.SphinxSearchOptions.SortMode" /> is not
            set to <see cref="F:SphinxConnector.NativeApi.SphinxSortMode.Relevance" />.
            </summary>
      <value>The sort by clause.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.MinDocumentId">
      <summary>
            Gets or sets the mininum Id for a document to be matched. Default is 0.
            </summary>
      <value>The min id.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.MaxDocumentId">
      <summary>
            Gets or sets the maximum id for a document to be matched. Default is 0.
            </summary>
      <value>The max id.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchOptions.QueryFlags">
      <summary>
            Gets or sets additional query flags. Supported with Sphinx 2.1.1 and up.
            </summary>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxSearchResult">
      <summary>
            Represents the result of a query.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchResult.Warning">
      <summary>
            Gets a warning for this result, if any.
            </summary>
      <value>The warning.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchResult.Error">
      <summary>
            Gets an error for this result, if any.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchResult.Total">
      <summary>
            Gets the total number of matches in this result.
            </summary>
      <value>The total number of matches in this result.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchResult.TotalFound">
      <summary>
            Gets the total number of matches found by searchd.
            </summary>
      <value>The total number of matches.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchResult.SearchTime">
      <summary>
            Gets the time searchd needed to find the result.
            </summary>
      <value>The search time.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchResult.Fields">
      <summary>
            Gets a list of strings containing the names of the fields for this result.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchResult.Matches">
      <summary>
            Gets a list containing the matches for this result.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxSearchResult.WordInfo">
      <summary>
            Gets a list containing the word infos for this result.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxSortMode">
      <summary>
            Determines the sort mode searchd uses to sort matched documents.
            </summary>
      <seealso href="http://www.sphinxsearch.com/docs/current.html#sorting-modes" />
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxSortMode.Relevance">
      <summary>
            Sorts by relevance in descending order (best matches first). This is the default.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxSortMode.AttributeDescending">
      <summary>
            Sorts by an attribute in descending order (bigger attribute values first).
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxSortMode.AttributeAscending">
      <summary>
            Sorts by an attribute in ascending order (smaller attribute values first).
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxSortMode.TimeSegments">
      <summary>
            Sorts by time segments (last hour/day/week/month) in descending order, and then by relevance in descending order.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxSortMode.Extended">
      <summary>
            Sorts by SQL-like combination of columns in ASC/DESC order.
            </summary>
    </member>
    <member name="F:SphinxConnector.NativeApi.SphinxSortMode.Expression">
      <summary>
            Sorts by an arithmetic expression.
            </summary>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxStatusInfo">
      <summary>
            Provides the name and value of a status variable of searchd. 
            <seealso cref="M:SphinxConnector.NativeApi.SphinxClient.GetStatus" /></summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxStatusInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxStatusInfo.Name">
      <summary>
            Gets the name of the status variable.
            </summary>
      <value>The name of the status variable.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxStatusInfo.Value">
      <summary>
            Gets the value of the status variable.
            </summary>
      <value>The value of the status variable.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxTimestamp">
      <summary>
            Represents the Sphinx type timestamp.
            </summary>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxTimestamp" /> struct.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.NativeApi.SphinxTimestamp" /> struct.
            </summary>
      <param name="unixTimestamp">The unix timestamp.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.Equals(SphinxConnector.NativeApi.SphinxTimestamp)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to. 
            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.ToString">
      <summary>
            Converts the value of the current <see cref="T:SphinxConnector.NativeApi.SphinxTimestamp" /> object to its equivalent string representation.
            </summary>
      <returns>
            A string representation of the value of the current <see cref="T:SphinxConnector.NativeApi.SphinxTimestamp" /> object.
            </returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.op_Equality(SphinxConnector.NativeApi.SphinxTimestamp,SphinxConnector.NativeApi.SphinxTimestamp)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.op_Inequality(SphinxConnector.NativeApi.SphinxTimestamp,SphinxConnector.NativeApi.SphinxTimestamp)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.op_GreaterThan(SphinxConnector.NativeApi.SphinxTimestamp,SphinxConnector.NativeApi.SphinxTimestamp)">
      <summary>
            Implements the operator &gt;.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.op_LessThan(SphinxConnector.NativeApi.SphinxTimestamp,SphinxConnector.NativeApi.SphinxTimestamp)">
      <summary>
            Implements the operator &lt;.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.op_GreaterThanOrEqual(SphinxConnector.NativeApi.SphinxTimestamp,SphinxConnector.NativeApi.SphinxTimestamp)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.op_LessThanOrEqual(SphinxConnector.NativeApi.SphinxTimestamp,SphinxConnector.NativeApi.SphinxTimestamp)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.op_Implicit(System.DateTime)~SphinxConnector.NativeApi.SphinxTimestamp">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:SphinxConnector.NativeApi.SphinxTimestamp" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:SphinxConnector.NativeApi.SphinxConversionException">
                The value is too small or too big.
            </exception>
    </member>
    <member name="M:SphinxConnector.NativeApi.SphinxTimestamp.op_Implicit(SphinxConnector.NativeApi.SphinxTimestamp)~System.DateTime">
      <summary>
            Performs an implicit conversion from <see cref="T:SphinxConnector.NativeApi.SphinxTimestamp" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxTimestamp.Value">
      <summary>
            Gets the value of the current instance.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxTimestamp.SupportedSince">
      <summary>
            Gets the version since when this type is supported by Sphinx.
            </summary>
      <value>The version.</value>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxTimestamp.SphinxAttributeType">
      <summary>
            Gets the type of the sphinx attribute this instance represents.
            </summary>
      <value>The type of the sphinx attribute.</value>
    </member>
    <member name="T:SphinxConnector.NativeApi.SphinxVersion">
      <summary>
            Provides a convenient way to access to all supported Sphinx versions.
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V223">
      <summary>
            Sphinx 2.2.3
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V222">
      <summary>
            Sphinx 2.2.2
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V221">
      <summary>
            Sphinx 2.2.1
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V216">
      <summary>
            Sphinx 2.1.6
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V215">
      <summary>
            Sphinx 2.1.5
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V214">
      <summary>
            Sphinx 2.1.4
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V213">
      <summary>
            Sphinx 2.1.3
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V212">
      <summary>
            Sphinx 2.1.2
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V211">
      <summary>
            Sphinx 2.1.1
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V209">
      <summary>
            Sphinx 2.0.9
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V208">
      <summary>
            Sphinx 2.0.8
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V207">
      <summary>
            Sphinx 2.0.7
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V206">
      <summary>
            Sphinx 2.0.6
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V205">
      <summary>
            Sphinx 2.0.5
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V204">
      <summary>
            Sphinx 2.0.4
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V203">
      <summary>
            Sphinx 2.0.3
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V202">
      <summary>
            Sphinx 2.0.2
            </summary>
    </member>
    <member name="P:SphinxConnector.NativeApi.SphinxVersion.V201">
      <summary>
            Sphinx 2.0.1
            </summary>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLCommand">
      <summary>
            Represents a SphinxQL statement to execute against Sphinx. This class cannot be inherited.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> class.
            </summary>
      <param name="commandText">The SphinxQL command text to run against a Sphinx index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="commandText" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="commandText" /> is empty.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.#ctor(SphinxConnector.SphinxQL.SphinxQLConnection)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> class.
            </summary>
      <param name="sphinxQLConnection">The connection to associate with this command.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sphinxQLConnection" /> is null.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.#ctor(System.String,SphinxConnector.SphinxQL.SphinxQLConnection)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> class.
            </summary>
      <param name="commandText">The SphinxQL command text to run against a Sphinx index.</param>
      <param name="sphinxQLConnection">The connection to associate with this command.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="commandText" /> or 
            <paramref name="sphinxQLConnection" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="commandText" /> is empty.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.Prepare">
      <summary>
            Creates a prepared (or compiled) version of the command on the data source. Not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.Cancel">
      <summary>
            Attempts to cancel the execution of a <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" />.
            Currently not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.ExecuteReader">
      <summary>
            Executes the command text against the connection.
            </summary>
      <returns>
            A <see cref="T:SphinxConnector.SphinxQL.SphinxQLDataReader" />.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            There is no connection associated with this command or the connection is closed.
            </exception>
      <exception cref="T:SphinxConnector.SphinxQL.SphinxQLException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>
            Executes the command text against the connection.
            </summary>
      <param name="behavior">An instance of <see cref="T:System.Data.CommandBehavior" />.</param>
      <returns>
            A <see cref="T:SphinxConnector.SphinxQL.SphinxQLDataReader" />.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            There is no connection associated with this command or the connection is closed.
            </exception>
      <exception cref="T:SphinxConnector.SphinxQL.SphinxQLException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.ExecuteNonQuery">
      <summary>
            Executes a SphinxQL statement against a connection object.
            </summary>
      <returns>The number of rows affected by the statement.</returns>
      <exception cref="T:System.InvalidOperationException">
            There is no connection associated with this command or the connection is closed.
            </exception>
      <exception cref="T:SphinxConnector.SphinxQL.SphinxQLException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.ExecuteScalar">
      <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. 
            All other columns and rows are ignored.
            </summary>
      <returns>
            The first column of the first row in the result set.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            There is no connection associated with this command or the connection is closed.
            </exception>
      <exception cref="T:SphinxConnector.SphinxQL.SphinxQLException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.CreateDbParameter">
      <summary>
            Creates a new instance of a <see cref="T:System.Data.Common.DbParameter" /> object.
            </summary>
      <returns>
            A <see cref="T:System.Data.Common.DbParameter" /> object.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>
            Executes the command text against the connection.
            </summary>
      <param name="behavior">An instance of <see cref="T:System.Data.CommandBehavior" />.</param>
      <returns>
            A <see cref="T:System.Data.Common.DbDataReader" />.
            </returns>
      <exception cref="T:System.InvalidOperationException">
      </exception>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.Parameters">
      <summary>
            Gets the collection of <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> objects.
            </summary>
      <value>
      </value>
      <returns>
            The parameters of the SphinxQL statement.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.CommandText">
      <summary>
            Gets or sets the command text to execute.
            </summary>
      <value>
      </value>
      <returns>
            The command text to execute. The default value is an empty string ("").
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.CommandTimeout">
      <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            Currently not supported.
            </summary>
      <value>
      </value>
      <returns>
            The time in seconds to wait for the command to execute.
            </returns>
      <remarks>
            The value of the property is currently not used by SphinxConnector.NET. However, to prevent the Visual Studio designer from 
            reporting errors, this property can be assigned to (previous versions threw a NotSupportedException).
            </remarks>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.CommandType">
      <summary>
             Indicates or specifies how the <see cref="P:SphinxConnector.SphinxQL.SphinxQLCommand.CommandText" /> property is interpreted.
             Setting this property to <see cref="F:System.Data.CommandType.TableDirect" /> is not supported.
             </summary>
      <returns>
             One of the <see cref="T:System.Data.CommandType" /> values. The default is Text.
             </returns>
      <remarks>
             To call the <b>SNIPPETS</b> and <b>KEYOWRDS</b> procedures, set the <see cref="P:SphinxConnector.SphinxQL.SphinxQLCommand.CommandType" />
             to <see cref="F:System.Data.CommandType.StoredProcedure" />. 
             The parameters do not need to be named, but they can. Parameters will be added as arguments to the procedure
             in the order in which they have been added to the <see cref="P:SphinxConnector.SphinxQL.SphinxQLCommand.Parameters" /> collection.
             Note how in the example for the SNIPPETS procedure the <see cref="P:SphinxConnector.SphinxQL.SphinxQLParameter.SphinxType" /> property
             for the last parameter is set to <see cref="F:SphinxConnector.SphinxQL.SphinxType.BigInt" />. This is done to workaround the fact
             that the option parameters may not be quoted.
             </remarks>
      <example>
        <code>
             using (SphinxQLConnection connection = new SphinxQLConnection(connectionString))
             {
                 var command = connection.CreateCommand("KEYWORDS");
                 command.CommandType = CommandType.StoredProcedure;
                 command.Parameters.Add("My Text");
                 command.Parameters.Add("My Index");
                 command.Parameters.Add(1);
            
                 connection.Open();
            
                 SphinxQLDataAdapter dataAdapter = new SphinxQLDataAdapter { SelectCommand = command };
                 DataTable dt = new DataTable();
                 dataAdapter.Fill(dt);
                 dataAdapter.Dispose();
             }
             
             using (SphinxQLConnection connection = new SphinxQLConnection(connectionString))
             {
                 var command = connection.CreateCommand("SNIPPETS");
                 command.CommandType = CommandType.StoredProcedure;
                 command.Parameters.Add("document text");
                 command.Parameters.Add("sakila");
                 command.Parameters.Add("text");
                 command.Parameters.Add(new SphinxQLParameter { Value = "5 AS limit", SphinxType = SphinxType.BigInt });
            
                 connection.Open();
            
                 SphinxQLDataAdapter dataAdapter = new SphinxQLDataAdapter { SelectCommand = command };
                 DataTable dt = new DataTable();
                 dataAdapter.Fill(dt);
                 dataAdapter.Dispose();
              }
             </code>
      </example>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.UpdatedRowSource">
      <summary>
            Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow" /> 
            when used by the Update method of a <see cref="T:System.Data.Common.DbDataAdapter" />.
            Currently not supported.
            </summary>
      <value>
      </value>
      <returns>
            One of the <see cref="T:System.Data.UpdateRowSource" /> values. The default is Both unless the command is automatically generated. Then the default is None.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.DesignTimeVisible">
      <summary>
            Gets or sets a value indicating whether the command object should be visible in a customized interface control.
            </summary>
      <value>
      </value>
      <returns>true, if the command object should be visible in a control; otherwise false. The default is true.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.Transaction">
      <summary>
            Gets or sets the <see cref="T:SphinxConnector.SphinxQL.SphinxQLTransaction" /> within which this <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> object executes.
            </summary>
      <value>
      </value>
      <returns>
            The transaction within which a Command object of a .NET Framework data provider executes. The default value is a null reference (Nothing in Visual Basic).
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.Connection">
      <summary>
            Gets or sets the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnection" /> used by this <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" />.
            </summary>
      <value>
      </value>
      <returns>
            The connection to the data source.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            Occurs if the current instance is currently participating in a transaction.
            </exception>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.DbConnection">
      <summary>
            Gets or sets the <see cref="T:System.Data.Common.DbConnection" /> used by this <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
      <value>
      </value>
      <returns>
            The connection to the data source.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.DbParameterCollection">
      <summary>
            Gets the collection of <see cref="T:System.Data.Common.DbParameter" /> objects.
            </summary>
      <value>
      </value>
      <returns>
            The parameters of the SQL statement or stored procedure.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLCommand.DbTransaction">
      <summary>
            Gets or sets the <see cref="P:System.Data.Common.DbCommand.DbTransaction" /> within which this <see cref="T:System.Data.Common.DbCommand" /> object executes.
            </summary>
      <value>
      </value>
      <returns>
            The transaction within which a Command object of a .NET Framework data provider executes. The default value is a null reference (Nothing in Visual Basic).
            </returns>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLConnection">
      <summary>
             Represents a connection to Sphinx. This class cannot be inherited.
             </summary>
      <remarks>
             On creation, all properties of the class are set to their initial values. The default <see cref="P:SphinxConnector.SphinxQL.SphinxQLConnection.ConnectionString" /> is an
             empty string which is equivalent to "Data Source=localhost;Port=9306;pooling=false;Min Pool Size=5;Max Pool Size=20".
             </remarks>
      <example>
             The following example creates a <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> and a <b>SphinxQLConnection</b> to retrieve data
             from an index.
             <code>
             string connectionString = "Data Source=localhost;Port=9306;pooling=true";
             
             using (SphinxQLConnection connection = new SphinxQLConnection(connectionString))
             {
                 SphinxQLCommand sphinxQLCommand = new SphinxQLCommand("SELECT * from sakila;", sphinxQLConnection);
             
                 connection.Open();
            
                 using (SphinxQLDataReader sphinxQLDataReader = sphinxQLCommand.ExecuteReader())
                 {
                     while(sphinxQLDataReader.Read())
                     {
                         Console.Writeline(sphinxQLDataReader.GetInt32("id");
                     }
                 }
             }
             </code></example>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnection" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnection" /> class.
            </summary>
      <param name="connectionString">
            The string that should be used to open the connection.
            </param>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.Close">
      <summary>
            Closes the connection to Sphinx. This is the preferred method of closing any open connection.
            </summary>
      <exception cref="T:SphinxConnector.SphinxQL.SphinxQLException">
            The connection-level error that occurred while closing the connection.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.ChangeDatabase(System.String)">
      <summary>
            Changes the current database for an open connection. Not supported.
            </summary>
      <param name="databaseName">Specifies the name of the database for the connection to use.</param>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.Open">
      <summary>
            Opens a connection to Sphinx.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The connection has already been opened.<br /> 
            -or-<br /> 
            The <see cref="P:SphinxConnector.SphinxQL.SphinxQLConnection.ConnectionTimeout" /> expired while retrieving a connection from the pool. <br />
            -or-<br />
            An attempt to connect to a Sphinx server with a version smaller than 2.0.1 has been made.
            </exception>
      <exception cref="T:SphinxConnector.SphinxQL.SphinxQLException">
      </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has already been disposed.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.GetSchema">
      <summary>
            Returns schema information for the data source of this <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnection" />. Not supported.
            </summary>
      <returns>
            A <see cref="T:System.Data.DataTable" /> that contains schema information.
            </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.GetSchema(System.String)">
      <summary>
            Returns schema information for the data source of this <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnection" /> using the specified string for the schema name.
            Not supported.
            </summary>
      <param name="collectionName">Specifies the name of the schema to return.</param>
      <returns>
            A <see cref="T:System.Data.DataTable" /> that contains schema information.
            </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.GetSchema(System.String,System.String[])">
      <summary>
            Returns schema information for the data source of this <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnection" /> using the specified string for the schema name and the specified string array for the restriction values.
            Not supported.
            </summary>
      <param name="collectionName">Specifies the name of the schema to return.</param>
      <param name="restrictionValues">Specifies a set of restriction values for the requested schema.</param>
      <returns>
            A <see cref="T:System.Data.DataTable" /> that contains schema information.
            </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>
            Enlists in the specified transaction. 
            </summary>
      <param name="transaction">A reference to an existing <see cref="T:System.Transactions.Transaction" /> in which to enlist.</param>
      <exception cref="T:System.InvalidOperationException">The connection is already enlist in another transaction.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.BeginTransaction">
      <summary>
            Begins a new transaction.
            </summary>
      <returns>A <see cref="T:SphinxConnector.SphinxQL.SphinxQLTransaction" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">
            The connection is closed or a transaction has already been started for this instance.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
            Begins a new transaction with the specified isolation level. Not supported.
            </summary>
      <param name="isolationLevel">The isolation level to use for the transaction.</param>
      <returns>Nothing</returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.CreateCommand">
      <summary>
            Creates and returns a <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> object associated with the current connection.
            </summary>
      <returns>
            A <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> object.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.CreateCommand(System.String)">
      <summary>
            Creates and returns a <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> object associated with the current connection and
            the provided command text.
            </summary>
      <param name="commandText">The command text for the returned command object.</param>
      <returns>
            A <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> object.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.CreateDbCommand">
      <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object associated with the current connection.
            </summary>
      <returns>
            A <see cref="T:System.Data.Common.DbCommand" /> object.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>
            Starts a database transaction.
            </summary>
      <param name="isolationLevel">Specifies the isolation level for the transaction.</param>
      <returns>
            An object representing the new transaction.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnection.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnection" /> and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnection.ConnectionTimeout">
      <summary>
            Gets the time (in seconds) to wait while establishing a connection before terminating the attempt and generating an error.
            </summary>
      <value>
      </value>
      <returns>
            The time (in seconds) to wait for a connection to open. The default value is 15.
            </returns>
      <remarks>
            This value can be changed via the connection string option <b>Connection Timeout</b>.
            A value of 0 indicates no limit, and should be avoided in a ConnectionString because an attempt to connect waits indefinitely.
            </remarks>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnection.ConnectionString">
      <summary>
             Gets or sets the string used to open the connection. 
             </summary>
      <value>
      </value>
      <returns>
             The connection string used to establish the initial connection. The default value is an empty string.
             </returns>
      <remarks>
             An empty connection string will cause the default values to be used.
             <br /><list type="bullet"><item><description>Connection string options must be seperated by a semicolon (;).</description></item><item><description>Connection string options are not case sensitive.</description></item><item><description>If an option appears several times, the last value will be used.</description></item></list><list type="table"><listheader><term>Keyword</term><term>Default</term><term>Description</term></listheader><item><description>Datasource <br />
              -or- <br />
              Data Source
              -or- <br />
              Host</description><description>localhost</description><description>Specifies the name of the host or the IP address to connect to.
              </description></item><item><description>Port</description><description>9306</description><description>Specifies to which port on the host to connect to.</description></item><item><description>Pooling</description><description>'false'</description><description>Indicates whether to enable pooling of SphinxQL connections.
              Note that pooling will only work with Sphinx 1.10.1 and above. Also make sure that the
              workers option in your sphinx.conf is <b>not</b> set to <b>none</b>.
              </description></item><item><description>Min Pool Size  <br />
              -or- <br />
              MinPoolSize</description><description>0</description><description>Specifies the mininum number of connections which should be created upon initialization
              of the connection pool.
              </description></item><item><description>Max Pool Size <br />
              -or- <br />
              MaxPoolSize</description><description>20</description><description>Specifies the maxinum number of connections allowed a connection pool. If this number is 
              reached and all connections are in use, an exception is thrown.
              </description></item><item><description>Connection Timeout <br />
              -or- <br />
              Connect Timeout</description><description>15</description><description>Specifies the time (in seconds) to wait while establishing a connection before terminating the attempt 
              and generating an error.
              </description></item><item><description>Enlist</description><description>true</description><description>Specifies whether connections should automatically enlist in an ambient <see cref="T:System.Transactions.Transaction" />.</description></item><item><description>Encoding</description><description>utf-8</description><description>
              Specifies the encoding to use when sending queries or retrieving results from Sphinx.
             </description></item></list></remarks>
      <exception cref="T:System.InvalidOperationException">
             Occurs when trying to change the connection string of an open connection.
             </exception>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnection.Database">
      <summary>
            Always returns "Sphinx".
            </summary>
      <value>
      </value>
      <returns>
            Always returns "<b>Sphinx</b>".
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnection.State">
      <summary>
            Gets a string that describes the state of the connection.
            </summary>
      <value>
      </value>
      <returns>
            The state of the connection. 
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnection.DataSource">
      <summary>
            Gets the name of the Sphinx server to which to connect.
            </summary>
      <value>
      </value>
      <returns>
            The name of the Sphinx server to which to connect.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnection.ServerVersion">
      <summary>
            Gets a string that represents the version of the server to which the object is connected.
            </summary>
      <value>
      </value>
      <returns>
            The version of Sphinx to which the object is connected.
            </returns>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder">
      <summary>
            Provides a simple way to create and manage the contents of connection strings used by the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnection" /> class. 
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" /> class.
            </summary>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.Clear">
      <summary>
            Clears the contents of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" /> instance.
            </summary>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" /> is read-only.
            </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.ContainsKey(System.String)">
      <summary>
            Determines whether the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" /> contains a specific key.
            </summary>
      <param name="keyword">The key to locate in the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" />.</param>
      <returns>
            true if the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" /> contains an entry with the specified key; otherwise false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> is a null reference (Nothing in Visual Basic).
            </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.Remove(System.String)">
      <summary>
            Removes the entry with the specified key from the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" /> instance.
            </summary>
      <param name="keyword">The key of the key/value pair to be removed from the connection string in this <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" />.</param>
      <returns>
            true if the key existed within the connection string and was removed; false if the key did not exist.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> is null (Nothing in Visual Basic)
            </exception>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" /> is read-only, or the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" /> has a fixed size.
            </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.Keys">
      <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" />.
            </summary>
      <value>
      </value>
      <returns>
            An <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder" />.
            </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.Host">
      <summary>
            Gets or sets the host of the instance of Sphinx to connect to.
            </summary>
      <value>The value of the Host property, or <b>localhost</b> if none has been supplied.</value>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.Port">
      <summary>
            Gets or sets the port to connect to.
            </summary>
      <value>The port.</value>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.PoolingEnabled">
      <summary>
            Gets or sets a Boolean value that indicates whether the connection will be pooled 
            or explicitly opened every time that the connection is requested. 
            </summary>
      <value>The value of the PoolingEnabled property, or <b>false</b> if none has been supplied.</value>
      <remarks>
            For pooling to work, the <b>workers</b> option may <b>not</b> be set to none.
            </remarks>
      <seealso href="http://www.sphinxsearch.com/docs/manual-1.10.html#conf-workers" />
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.MinPoolSize">
      <summary>
            Gets or sets the minimum number of connections allowed in the connection pool for this specific connection string.
            </summary>
      <value>The value of the MinPoolSize property, or <b>0</b> if none has been supplied.</value>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.MaxPoolSize">
      <summary>
            Gets or sets the maximum number of connections allowed in the connection pool for this specific connection string.
            </summary>
      <value>The value of the MaxPoolSize property, or <b>20</b> if none has been supplied.</value>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.ConnectionTimeout">
      <summary>
            Gets or sets the connection timeout.
            </summary>
      <value>The value of the ConnectTimeout property, or <b>15</b> if no value has been supplied.</value>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.Enlist">
      <summary>
            Gets or sets a value indicating whether connections should automatically enlist in an ambient
            <see cref="T:System.Transactions.Transaction" />. Default is true.
            </summary>
      <value>
        <c>true</c> to automatically enlist; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.Encoding">
      <summary>
            Gets or sets the encoding that is used to send queries to and retrieve results from Sphinx.
            Default is utf-8.
            </summary>
      <value>The encoding that is used for queries and result sets.</value>
      <remarks>
            When setting the encoding via a connection string, please use the code page name
            e.g <b>encoding=latin1.</b></remarks>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLConnectionStringBuilder.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:System.Object" /> with the specified keyword.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLDataAdapter">
      <summary>
             Represents a set of data commands and a connection that are used to fill a DataSet. This class cannot be inherited.
             </summary>
      <example>
             This example shows how to populate a <b>DataTable</b> object with data from an index 
             with the help of the SphinxQLDataAdapter class.
             <code>
             SphinxQLDataAdapter dataAdapter = new SphinxQLDataAdapter();
            
             using (var sphinxQLConnection = new SphinxQLConnection("Data Source=localhost;Port=9306"))
             {
                 var sphinxQLCommand = new SphinxQLCommand("SELECT * from sakila;", sphinxQLConnection);
            
                 sphinxQLConnection.Open();
            
                 dataAdapter.SelectCommand = sphinxQLCommand;
            
                 DataTable dataTable = new DataTable();
            
                 dataAdapter.Fill(dataTable);
                 dataAdapter.Dispose();
             }
             </code></example>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataAdapter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLDataAdapter" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataAdapter.#ctor(System.String,SphinxConnector.SphinxQL.SphinxQLConnection)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLDataAdapter" /> class.
            </summary>
      <param name="selectCommandText">The select command text.</param>
      <param name="connection">The connection.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
      <summary>
            Raises the RowUpdated event.
            </summary>
      <param name="value">A <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
      <summary>
            Raises the RowUpdating event.
            </summary>
      <param name="value">An <see cref="T:System.Data.Common.RowUpdatingEventArgs" />  that contains the event data.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLRowUpdatedEventArgs" /> class.
            </summary>
      <param name="dataRow">The <see cref="T:System.Data.DataRow" /> used to update the data source.</param>
      <param name="command">The <see cref="T:System.Data.IDbCommand" /> executed during the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
      <param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
      <param name="tableMapping">A <see cref="T:System.Data.Common.DataTableMapping" /> object.</param>
      <returns>
            A new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLRowUpdatingEventArgs" /> class.
            </summary>
      <param name="dataRow">The <see cref="T:System.Data.DataRow" /> that updates the data source.</param>
      <param name="command">The <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
      <param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
      <param name="tableMapping">A <see cref="T:System.Data.Common.DataTableMapping" /> object.</param>
      <returns>
            A new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.
            </returns>
    </member>
    <member name="E:SphinxConnector.SphinxQL.SphinxQLDataAdapter.RowUpdated">
      <summary>
            Occurs during update after a command is executed against the data source.
            </summary>
    </member>
    <member name="E:SphinxConnector.SphinxQL.SphinxQLDataAdapter.RowUpdating">
      <summary>
            Occurs during update before a command is executed against the data source.
            </summary>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataAdapter.SelectCommand">
      <summary>
            Gets or sets a command used to select records in the data source.
            </summary>
      <value>
      </value>
      <returns>
            A <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> that is used during <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> to select records from data source for placement in the data set.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataAdapter.InsertCommand">
      <summary>
            Gets or sets a command used to insert new records into the data source.
            </summary>
      <value>
      </value>
      <returns>
            A <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> used during <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> to insert records in the data source for new rows in the data set.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataAdapter.UpdateCommand">
      <summary>
            Gets or sets a command used to update records in the data source.
            </summary>
      <value>
      </value>
      <returns>
            A <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> used during <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> to update records in the data source for modified rows in the data set.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataAdapter.DeleteCommand">
      <summary>
            Gets or sets a command for deleting records from the data set.
            </summary>
      <value>
      </value>
      <returns>
            An <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> used during <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> to delete records in the data source for deleted rows in the data set.
            </returns>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLDataReader">
      <summary>
             Reads a forward-only stream of rows from Sphinx. This class cannot be inherited.
             </summary>
      <example>
             The following example shows how to read data from Sphinx with the <b>SphinxQLDataReader</b> class.
             <code>
             using (SphinxQLConnection sphinxQLConnection = new SphinxQLConnection("Data Source = localhost;Port=9306"))
             {
                 SphinxQLCommand sphinxQLCommand = new SphinxQLCommand("SELECT * from sakila;", sphinxQLConnection);
            
                 sphinxQLConnection.Open();
            
                 using (SphinxQLDataReader sphinxQLDataReader = sphinxQLCommand.ExecuteReader())
                 {
                     while (sphinxQLDataReader.Read())
                     {
                         Console.WriteLine(sphinxQLDataReader.GetInt32("id"));
                     }
                 }
             }
             </code></example>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.Close">
      <summary>
            Closes the <see cref="T:SphinxConnector.SphinxQL.SphinxQLDataReader" /> object.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetSchemaTable">
      <summary>
            Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLDataReader" />.
            </summary>
      <returns>
            A <see cref="T:System.Data.DataTable" /> that describes the column metadata.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.NextResult">
      <summary>
             Advances the reader to the next result when reading the results of multiple queries.
             </summary>
      <returns>
             true if there are more result sets; otherwise false.
             </returns>
      <example>
        <code>
             using (SphinxQLConnection connection = new SphinxQLConnection())
             {
                 SphinxQLCommand command = new SphinxQLCommand(connection);
                 command.CommandText = @"SELECT * from sakila WHERE MATCH(@match1);
                                         SELECT * from sakila WHERE MATCH(@match2)";
            
                 command.Parameters.Add("@match1", "room");
                 command.Parameters.Add("@match2", "amazing");
            
                 connection.Open();
            
                 using (SphinxQLDataReader dataReader = command.ExecuteReader())
                 {
                     while (dataReader.Read())
                     {
                         Console.WriteLine(dataReader.GetInt64("id"));
                     }
            
                     dataReader.NextResult();
            
                     while (dataReader.Read())
                     {
                         Console.WriteLine(dataReader.GetInt64("id"));
                     }
                 }
             }
             </code>
      </example>
      <exception cref="T:SphinxConnector.SphinxQL.SphinxQLException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.Read">
      <summary>
            Advances the reader to the next record in a result set.
            </summary>
      <returns>
            true if there are more rows; otherwise false.
            </returns>
      <exception cref="T:SphinxConnector.SphinxQL.SphinxQLException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetMvaValues(System.String)">
      <summary>
            Gets the values of a multi value attribute.
            </summary>
      <param name="name">The name of the column containing the values of the multi value attribute.</param>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" />containing the values.</returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetMvaValues(System.Int32)">
      <summary>
            Gets the values of a multi value attribute.
            </summary>
      <param name="ordinal">The zero-based column ordinal of the column containing the values of the multi value attribute.</param>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> containing the values. </returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetSphinxTimestamp(System.String)">
      <summary>
            Gets the value of the specified column as a SphinxTimestamp.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetSphinxTimestamp(System.Int32)">
      <summary>
            Gets the value of the specified column as a SphinxTimestamp.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetBoolean(System.Int32)">
      <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetBoolean(System.String)">
      <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetByte(System.Int32)">
      <summary>
            Gets the value of the specified column as a byte.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a stream of bytes from the specified column, starting at location indicated by <paramref name="dataOffset" />, into the buffer, starting at the location indicated by <paramref name="bufferOffset" />.
            Currently not supported.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <param name="dataOffset">The index within the row from which to begin the read operation.</param>
      <param name="buffer">The buffer into which to copy the data.</param>
      <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
      <param name="length">The maximum number of characters to read.</param>
      <returns>The actual number of bytes read.</returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetChar(System.Int32)">
      <summary>
            Gets the value of the specified column as a single character.         
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetChar(System.String)">
      <summary>
            Gets the value of the specified column as a single character.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
            Reads a stream of characters from the specified column, starting at location indicated by <paramref name="dataOffset" />, 
            into the buffer, starting at the location indicated by <paramref name="bufferOffset" />. 
            Currently not supported.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <param name="dataOffset">The index within the row from which to begin the read operation.</param>
      <param name="buffer">The buffer into which to copy the data.</param>
      <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
      <param name="length">The maximum number of characters to read.</param>
      <returns>The actual number of characters read.</returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetGuid(System.Int32)">
      <summary>
            Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetInt16(System.Int32)">
      <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetInt16(System.String)">
      <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetInt32(System.Int32)">
      <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetInt32(System.String)">
      <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetInt64(System.Int32)">
      <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetInt64(System.String)">
      <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetUInt32(System.String)">
      <summary>
            Gets the value of the specified column as a 32-bit unsigned integer.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetUInt32(System.Int32)">
      <summary>
            Gets the value of the specified column as a 32-bit unsigned integer.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetUInt64(System.String)">
      <summary>
            Gets the value of the specified column as a 64-bit unsigned integer.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetUInt64(System.Int32)">
      <summary>
            Gets the value of the specified column as a 64-bit unsigned integer.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetDateTime(System.String)">
      <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime" /> object.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetDateTime(System.Int32)">
      <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime" /> object.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetString(System.String)">
      <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.String" />.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetString(System.Int32)">
      <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.String" />.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetDecimal(System.String)">
      <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal" /> object.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException"> The name specified is not a valid column name.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetDecimal(System.Int32)">
      <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal" /> object.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetDouble(System.String)">
      <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException"> The name specified is not a valid column name.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetDouble(System.Int32)">
      <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetFloat(System.String)">
      <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException"> The name specified is not a valid column name.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetFloat(System.Int32)">
      <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetName(System.Int32)">
      <summary>
            Gets the name of the column, given the zero-based column ordinal.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The name of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetOrdinal(System.String)">
      <summary>
            Gets the column ordinal given the name of the column. This method
            is case insensitive.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The zero-based column ordinal.</returns>
      <exception cref="T:System.InvalidOperationException">
      </exception>
            Attempt to read data when no rows are present.
            <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception></member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetValue(System.Int32)">
      <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object" />.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The provided column index is out of range.</exception>
      <exception cref="T:System.InvalidOperationException">There are no rows are present either because
            <see cref="M:SphinxConnector.SphinxQL.SphinxQLDataReader.Read" /> hasn't been called or it returned false, or the statement didn't yield
            any results (<see cref="P:SphinxConnector.SphinxQL.SphinxQLDataReader.HasRows" /> is false)
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetValue(System.String)">
      <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object" />.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>The value of the specified column.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The name specified is not a valid column name.</exception>
      <exception cref="T:System.InvalidOperationException">There are no rows are present either because
            <see cref="M:SphinxConnector.SphinxQL.SphinxQLDataReader.Read" /> hasn't been called or it returned false, or the statement didn't yield
            any results (<see cref="P:SphinxConnector.SphinxQL.SphinxQLDataReader.HasRows" /> is false)
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetValues(System.Object[])">
      <summary>
            Gets all attribute columns in the collection for the current row.
            </summary>
      <param name="values">An array of <see cref="T:System.Object" /> into which to copy the attribute columns.</param>
      <returns>
            The number of instances of <see cref="T:System.Object" /> in the array.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.IsDBNull(System.Int32)">
      <summary>
            Gets a value that indicates whether the column contains nonexistent or missing values.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>
        <b>true</b> if the column is NULL, otherwise <b>false</b>.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.IsDBNull(System.String)">
      <summary>
            Gets a value that indicates whether the column contains nonexistent or missing values.
            </summary>
      <param name="name">The name of the column.</param>
      <returns>
        <b>true</b> if the column is NULL, otherwise <b>false</b>.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetDataTypeName(System.Int32)">
      <summary>
            Gets the name of the data type of the specified column.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>
            A string representing the name of the data type.
            </returns>
      <exception cref="T:System.InvalidOperationException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetFieldType(System.Int32)">
      <summary>
            Gets the data type of the specified column.
            </summary>
      <param name="ordinal">The zero-based column ordinal.</param>
      <returns>The data type of the specified column.</returns>
      <exception cref="T:System.InvalidOperationException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLDataReader.GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataReader.Depth">
      <summary>
            Gets a value indicating the depth of nesting for the current row. Always returns 0.
            </summary>
      <value>
      </value>
      <returns>
            The depth of nesting for the current row. Always 0.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataReader.IsClosed">
      <summary>
            Gets a value indicating whether the <see cref="T:SphinxConnector.SphinxQL.SphinxQLDataReader" /> is closed.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:SphinxConnector.SphinxQL.SphinxQLDataReader" /> is closed; otherwise false.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataReader.RecordsAffected">
      <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SphinxQL statement.
            </summary>
      <value>
      </value>
      <returns>
            The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataReader.FieldCount">
      <summary>
            Gets the number of columns in the current row.
            </summary>
      <value>
      </value>
      <returns>
            The number of columns in the current row.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataReader.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:System.Object" /> with the specified ordinal.
            </summary>
      <value>
      </value>
      <exception cref="T:System.IndexOutOfRangeException">
      </exception>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataReader.Item(System.String)">
      <summary>
            Gets the <see cref="T:System.Object" /> with the specified name.
            </summary>
      <value>
      </value>
      <exception cref="T:System.IndexOutOfRangeException">
            The name specified is not a valid column name.
            </exception>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLDataReader.HasRows">
      <summary>
            Gets a value that indicates whether this <see cref="T:SphinxConnector.SphinxQL.SphinxQLDataReader" /> contains one or more rows.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:SphinxConnector.SphinxQL.SphinxQLDataReader" /> contains one or more rows; otherwise false.
            </returns>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLException">
      <summary>
            The exception that is thrown when an SphinxQL error occurs.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).
            </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLException.Code">
      <summary>
            Gets the error code returned by Sphinx for the current exception.
            </summary>
      <value>The error code as returned by Sphinx.</value>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLParameter">
      <summary>
            Represents a parameter to a <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" />. This class cannot be inherited.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> class.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameter.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> class.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <param name="value">The value of the parameter.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameter.#ctor(System.String,SphinxConnector.SphinxQL.SphinxType)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> class.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <param name="sphinxType">The type of the parameter.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameter.#ctor(System.String,System.Object,SphinxConnector.SphinxQL.SphinxType)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> class.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <param name="value">The value of the parameter.</param>
      <param name="sphinxType">The type of the parameter.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameter.ResetDbType">
      <summary>
            Resets the DbType property to its original settings.
            </summary>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameter.Direction">
      <summary>
            Gets or sets a value that indicates whether the parameter is input-only, output-only, bidirectional, 
            or a stored procedure return value parameter. Not supported by Sphinx. All parameters are assumed to
            be input parameters
            </summary>
      <value>
      </value>
      <returns>
            One of the <see cref="T:System.Data.ParameterDirection" /> values. The default is Input.
            </returns>
      <exception cref="T:System.ArgumentException">
            The property is not set to one of the valid <see cref="T:System.Data.ParameterDirection" /> values.
            </exception>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameter.IsNullable">
      <summary>
            Gets or sets a value that indicates whether the parameter accepts null values.
            </summary>
      <value>
      </value>
      <returns>true if null values are accepted; otherwise false. The default is false.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameter.ParameterName">
      <summary>
            Gets or sets the name of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" />. 
            </summary>
      <value>
      </value>
      <returns>
            The name of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" />. The default is an empty string ("").
            </returns>
      <remarks>
            Do not name your parameters like build in Sphinx identifiers (@count, @id, @weight or 
            @groupby). These values are ignored by SphinxConnector.NET.
            </remarks>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameter.SourceColumn">
      <summary>
            Gets or sets the name of the source column mapped to the <see cref="T:System.Data.DataSet" /> and used for loading or returning the <see cref="P:SphinxConnector.SphinxQL.SphinxQLParameter.Value" />.
            </summary>
      <value>
      </value>
      <returns>
            The name of the source column mapped to the <see cref="T:System.Data.DataSet" />. The default is an empty string.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameter.SourceVersion">
      <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion" /> to use when you load <see cref="P:SphinxConnector.SphinxQL.SphinxQLParameter.Value" />.
            </summary>
      <value>
      </value>
      <returns>
            One of the <see cref="T:System.Data.DataRowVersion" /> values. The default is Current.
            </returns>
      <exception cref="T:System.ArgumentException">
            The property is not set to one of the <see cref="T:System.Data.DataRowVersion" /> values.
            </exception>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameter.SourceColumnNullMapping">
      <summary>
            Gets or sets a value which indicates whether the source column is nullable. This allows <see cref="T:System.Data.Common.DbCommandBuilder" /> to correctly generate Update statements for nullable columns.
            </summary>
      <value>
      </value>
      <returns>true if the source column is nullable; false if it is not.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameter.Size">
      <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
      <value>
      </value>
      <returns>
            The maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameter.SphinxType">
      <summary>
            Gets or sets the SphinxType of this instance. Default is <see cref="F:SphinxConnector.SphinxQL.SphinxType.String" />.
            </summary>
      <value>The SphinxType of this instance.</value>
      <exception cref="T:System.ArgumentException">
            The property is not set to a valid <see cref="T:SphinxConnector.SphinxQL.SphinxType" />.
            </exception>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameter.DbType">
      <summary>
            Gets or sets the <see cref="T:System.Data.DbType" /> of the parameter.
            </summary>
      <value>
      </value>
      <returns>
            One of the <see cref="T:System.Data.DbType" /> values. The default is <see cref="F:System.Data.DbType.String" />.
            </returns>
      <exception cref="T:System.ArgumentException">
            The property is not set to a valid <see cref="T:System.Data.DbType" />.
            </exception>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameter.Value">
      <summary>
            Gets or sets the value of the parameter. Default is null.
            </summary>
      <value>
      </value>
      <returns>
            An <see cref="T:System.Object" /> that is the value of the parameter. The default value is an empty String.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:SphinxConnector.SphinxQL.SphinxQLParameter.Value" /> is null or <see cref="F:System.DBNull.Value" /></exception>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLParameterCollection">
      <summary>
            Represents a collection of parameters associated with a <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" />.
            This class cannot be inherited.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Add(System.String,System.Object)">
      <summary>
            Adds the specified parameter name.
            </summary>
      <param name="parameterName">The name of the parameter.</param>
      <param name="value">The value.</param>
      <returns>A new <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object.</returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Add(System.String,System.Object,SphinxConnector.SphinxQL.SphinxType)">
      <summary>
            Adds a <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> to the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameterCollection" /> given the parameter name,
            the value and the data type.
            </summary>
      <param name="parameterName">The name of the parameter. </param>
      <param name="value">The value.</param>
      <param name="type">One the <see cref="T:SphinxConnector.SphinxQL.SphinxType" /> values.</param>
      <returns>A new <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object.</returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Add(SphinxConnector.SphinxQL.SphinxQLParameter)">
      <summary>
            Adds the specified <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object to the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameterCollection" />.
            </summary>
      <param name="parameter">The parameter.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Add(System.Object)">
      <summary>
            Adds a <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> item to the <see cref="T:System.Data.Common.DbParameterCollection" />.
            </summary>
      <param name="value">The <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> to add to the collection.</param>
      <returns>
            The index of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object in the collection.
            </returns>
      <remarks>
            In previous versions, this method created a <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object
            and assigned the <paramref name="value" /> parameter to the <see cref="P:SphinxConnector.SphinxQL.SphinxQLParameter.Value" /> property.
            This behavior did not match other data providers. The <paramref name="value" /> parameter
            should be an instance of <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" />. For backwards compatibility, the old behavior will
            continue to work for now, but will be removed in a future release. 
            Until that point, this method will first check whether <paramref name="value" /> is an instance of 
            <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" />, if it is, it will be added to the collection. If it is not,
            a <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object will be created and <paramref name="value" />
            will be assigned to the <see cref="P:SphinxConnector.SphinxQL.SphinxQLParameter.Value" /> property of the newly created object. Also, a
            warning will be logged in this case.
            </remarks>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Clear">
      <summary>
            Removes all <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> values from the <see cref="T:System.Data.Common.DbParameterCollection" />.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.IndexOf(System.Object)">
      <summary>
            Returns the index of the specified <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object.
            </summary>
      <param name="value">The <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object in the collection.</param>
      <returns>
            The index of the specified <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Insert(System.Int32,System.Object)">
      <summary>
            Inserts the specified index of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object with the specified name into the collection at the specified index.
            </summary>
      <param name="index">The index at which to insert the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object.</param>
      <param name="value">The <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object to insert into the collection.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Remove(System.Object)">
      <summary>
            Removes the specified <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object from the collection.
            </summary>
      <param name="value">The <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object to remove.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.RemoveAt(System.String)">
      <summary>
            Removes the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object with the specified name from the collection.
            </summary>
      <param name="parameterName">The name of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object to remove.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object at the specified position from the collection.
            </summary>
      <param name="index">The index where the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object is located.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.IndexOf(System.String)">
      <summary>
            Returns the index of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object with the specified name.
            </summary>
      <param name="parameterName">The name of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object in the collection.</param>
      <returns>
            The index of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> object with the specified name.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.GetEnumerator">
      <summary>
            Exposes the <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> method, which supports a simple iteration over a collection by a .NET Framework data provider.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Contains(System.String)">
      <summary>
            Indicates whether a <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> with the specified name exists in the collection.
            </summary>
      <param name="value">The name of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> to look for in the collection.</param>
      <returns>
            true if the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> is in the collection; otherwise false.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Contains(System.Object)">
      <summary>
            Indicates whether a <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> with the specified <see cref="P:SphinxConnector.SphinxQL.SphinxQLParameter.Value" /> is contained in the collection.
            </summary>
      <param name="value">The <see cref="P:SphinxConnector.SphinxQL.SphinxQLParameter.Value" /> of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> to look for in the collection.</param>
      <returns>
            true if the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> is in the collection; otherwise false.
            </returns>
      <remarks>
            In previous versions, this method checked whether this collection contained a <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" />
            with the <see cref="P:SphinxConnector.SphinxQL.SphinxQLParameter.Value" /> property equal to the specified <paramref name="value" />.
            This behavior did not match other data providers. The <paramref name="value" /> parameter
            should be an instance of <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" />. For backwards compatibility, the old behavior will
            continue to work for now, but will be removed in a future release. 
            Until that point, this method will check whether <paramref name="value" /> is an instance of 
            <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" />, if it is, the collection will searched for that instance. If it is not, the
            collection will be searched for a parameter where <see cref="P:SphinxConnector.SphinxQL.SphinxQLParameter.Value" /> equals  
            <paramref name="value" />.
            </remarks>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies all the elements of the current <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameterCollection" /> to the specified one-dimensional Array 
            starting at the specified destination Array index.
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from the current <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameterCollection" />.</param>
      <param name="index">A 32-bit integer that represents the index in the Array at which copying starts.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.AddRange(System.Array)">
      <summary>
            Adds an array of items with the specified values to the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameterCollection" />.
            </summary>
      <param name="values">An array of values of type <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> to add to the collection.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.GetParameter(System.Int32)">
      <summary>
            Returns the <see cref="T:System.Data.Common.DbParameter" /> object at the specified index in the collection.
            </summary>
      <param name="index">The index of the <see cref="T:System.Data.Common.DbParameter" /> in the collection.</param>
      <returns>
            The <see cref="T:System.Data.Common.DbParameter" /> object at the specified index in the collection.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.GetParameter(System.String)">
      <summary>
            Returns <see cref="T:System.Data.Common.DbParameter" /> the object with the specified name.
            </summary>
      <param name="parameterName">The name of the <see cref="T:System.Data.Common.DbParameter" /> in the collection.</param>
      <returns>
            The <see cref="T:System.Data.Common.DbParameter" /> the object with the specified name.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
      <summary>
            Sets the <see cref="T:System.Data.Common.DbParameter" /> object at the specified index to a new value.
            </summary>
      <param name="index">The index where the <see cref="T:System.Data.Common.DbParameter" /> object is located.</param>
      <param name="value">The new <see cref="T:System.Data.Common.DbParameter" /> value.</param>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
      <summary>
            Sets the <see cref="T:System.Data.Common.DbParameter" /> object with the specified name to a new value.
            </summary>
      <param name="parameterName">The name of the <see cref="T:System.Data.Common.DbParameter" /> object in the collection.</param>
      <param name="value">The new <see cref="T:System.Data.Common.DbParameter" /> value.</param>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Count">
      <summary>
            Specifies the number of items in the collection.
            </summary>
      <value>
      </value>
      <returns>
            The number of items in the collection.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameterCollection.SyncRoot">
      <summary>
            Specifies the <see cref="T:System.Object" /> to be used to synchronize access to the collection.
            </summary>
      <value>
      </value>
      <returns>
            A <see cref="T:System.Object" /> to be used to synchronize access to the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameterCollection" />.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameterCollection.IsFixedSize">
      <summary>
            Specifies whether the collection is a fixed size.
            </summary>
      <value>
      </value>
      <returns>true if the collection is a fixed size; otherwise false.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameterCollection.IsReadOnly">
      <summary>
            Specifies whether the collection is read-only.
            </summary>
      <value>
      </value>
      <returns>true if the collection is read-only; otherwise false.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameterCollection.IsSynchronized">
      <summary>
            Specifies whether the collection is synchronized.
            </summary>
      <value>
      </value>
      <returns>true if the collection is synchronized; otherwise false.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLParameterCollection.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:SphinxConnector.SphinxQL.SphinxQLParameter" /> with the specified name.
            </summary>
      <value>
      </value>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLProviderFactory">
      <summary>
            Represents a set of methods for creating instances of the provider's implementation of the data source classes.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLProviderFactory.CreateCommand">
      <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbCommand" /> class.
            </summary>
      <returns>
            A new instance of <see cref="T:System.Data.Common.DbCommand" />.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLProviderFactory.CreateConnection">
      <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbConnection" /> class.
            </summary>
      <returns>
            A new instance of <see cref="T:System.Data.Common.DbConnection" />.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLProviderFactory.CreateConnectionStringBuilder">
      <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> class.
            </summary>
      <returns>
            A new instance of <see cref="T:System.Data.Common.DbConnectionStringBuilder" />.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLProviderFactory.CreateDataAdapter">
      <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbDataAdapter" /> class.
            </summary>
      <returns>
            A new instance of <see cref="T:System.Data.Common.DbDataAdapter" />.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLProviderFactory.CreateParameter">
      <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbParameter" /> class.
            </summary>
      <returns>
            A new instance of <see cref="T:System.Data.Common.DbParameter" />.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLProviderFactory.CreateDataSourceEnumerator">
      <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> class.
            </summary>
      <returns>
            A new instance of <see cref="T:System.Data.Common.DbDataSourceEnumerator" />.
            </returns>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLProviderFactory.CreateCommandBuilder">
      <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbCommandBuilder" /> class.
            </summary>
      <returns>
            A new instance of <see cref="T:System.Data.Common.DbCommandBuilder" />.
            </returns>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLProviderFactory.CanCreateDataSourceEnumerator">
      <summary>
            Specifies whether the specific <see cref="T:System.Data.Common.DbProviderFactory" /> supports the <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> class.
            </summary>
      <value>
      </value>
      <returns>true if the instance of the <see cref="T:System.Data.Common.DbProviderFactory" /> supports the <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> class; otherwise false.</returns>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLRowUpdatedEventArgs">
      <summary>
            Provides data for the RowUpdated event of a SphinxQLDataAdapter.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLRowUpdatedEventArgs" /> class.
            </summary>
      <param name="dataRow">The <see cref="T:System.Data.DataRow" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
      <param name="command">The <see cref="T:System.Data.IDbCommand" /> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</param>
      <param name="statementType">The type of SQL statement executed.</param>
      <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLRowUpdatedEventArgs.Command">
      <summary>
            Gets the <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand"></see> executed when Update is called. 
            </summary>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLRowUpdatingEventArgs">
      <summary>
            Provides the data for the RowUpdating event of a SphinxQLDataAdapter.
            </summary>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
            Initializes a new instance of the <see cref="T:SphinxConnector.SphinxQL.SphinxQLRowUpdatingEventArgs" /> class.
            </summary>
      <param name="dataRow">The <see cref="T:System.Data.DataRow" /> to <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
      <param name="command">The <see cref="T:System.Data.IDbCommand" /> to execute when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</param>
      <param name="statementType">The type of SQL statement to execute.</param>
      <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping" /> to send through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLRowUpdatingEventArgs.Command">
      <summary>
             Gets or sets the <see cref="T:SphinxConnector.SphinxQL.SphinxQLCommand" /> to execute when performing the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.
            </summary>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLRowUpdatingEventArgs.BaseCommand">
      <summary>
            Gets or sets the <see cref="T:System.Data.IDbCommand" /> object for an instance of this class.
            </summary>
      <value>
      </value>
      <returns>
            The <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.
            </returns>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxQLTransaction">
      <summary>
            Represents a transaction. This class cannot be inherited.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLTransaction.Commit">
      <summary>
            Commits the transaction.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
      </exception>
      <exception cref="T:System.InvalidOperationException">
            Transaction has already been committed or rolled back.
            </exception>
      <exception cref="T:SphinxConnector.SphinxQL.SphinxQLException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLTransaction.Rollback">
      <summary>
            Rolls back a transaction from a pending state.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
      </exception>
      <exception cref="T:System.InvalidOperationException">
            Transaction has already been committed or rolled back.
            </exception>
      <exception cref="T:SphinxConnector.SphinxQL.SphinxQLException">
      </exception>
    </member>
    <member name="M:SphinxConnector.SphinxQL.SphinxQLTransaction.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Data.Common.DbTransaction" /> and optionally releases the managed resources.
            </summary>
      <param name="disposing">If true, this method releases all resources held by any managed objects that this <see cref="T:System.Data.Common.DbTransaction" /> references.</param>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLTransaction.IsolationLevel">
      <summary>
            Specifies the <see cref="T:System.Data.IsolationLevel" /> for this transaction. Not supported.
            </summary>
      <value>
      </value>
      <returns>
            The <see cref="T:System.Data.IsolationLevel" /> for this transaction.
            </returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="P:SphinxConnector.SphinxQL.SphinxQLTransaction.DbConnection">
      <summary>
            Specifies the <see cref="T:System.Data.Common.DbConnection" /> object associated with the transaction.
            </summary>
      <value>
      </value>
      <returns>
            The <see cref="T:System.Data.Common.DbConnection" /> object associated with the transaction.
            </returns>
    </member>
    <member name="T:SphinxConnector.SphinxQL.SphinxType">
      <summary>
            Specifies the data type of a field, a property, or a Parameter object.
            </summary>
    </member>
    <member name="F:SphinxConnector.SphinxQL.SphinxType.String">
      <summary>
            A type representing Unicode character strings.
            </summary>
    </member>
    <member name="F:SphinxConnector.SphinxQL.SphinxType.UInt">
      <summary>
            A 32-bit unsigned integers with values between 0 and 4294967295.
            </summary>
    </member>
    <member name="F:SphinxConnector.SphinxQL.SphinxType.BigInt">
      <summary>
            A 64-bit signed integer.
            </summary>
    </member>
    <member name="F:SphinxConnector.SphinxQL.SphinxType.Float">
      <summary>
            A floating point number within the range of 1e-38 to 1e+38
            </summary>
    </member>
    <member name="F:SphinxConnector.SphinxQL.SphinxType.Timestamp">
      <summary>
            A Unix timestamp.
            </summary>
    </member>
    <member name="F:SphinxConnector.SphinxQL.SphinxType.Bool">
      <summary>
            A type representing Boolean values of true or false.
            </summary>
    </member>
    <member name="F:SphinxConnector.SphinxQL.SphinxType.UBigInt">
      <summary>
             A 64-bit unsigned integer.
            </summary>
    </member>
    <member name="F:SphinxConnector.SphinxQL.SphinxType.MultiValue">
      <summary>
            A type representing a multi-value attribute
            </summary>
    </member>
  </members>
</doc>